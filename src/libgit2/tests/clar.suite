extern void test_refs_normalize__can_normalize_a_direct_reference_name(void);
extern void test_refs_normalize__cannot_normalize_any_direct_reference_name(void);
extern void test_refs_normalize__symbolic(void);
extern void test_refs_normalize__jgit_suite(void);
extern void test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version(void);
extern void test_refs_normalize__refspec_pattern(void);
extern void test_object_tree_walk__0(void);
extern void test_object_tree_walk__1(void);
extern void test_object_tree_walk__2(void);
extern void test_object_tree_walk__initialize(void);
extern void test_object_tree_walk__cleanup(void);
extern void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid(void);
extern void test_odb_backend_nonrefreshing__cleanup(void);
extern void test_merge_trees_modeconflict__df_conflict(void);
extern void test_merge_trees_modeconflict__initialize(void);
extern void test_merge_trees_modeconflict__cleanup(void);
extern void test_repo_open__bare_empty_repo(void);
extern void test_repo_open__standard_empty_repo_through_gitdir(void);
extern void test_repo_open__standard_empty_repo_through_workdir(void);
extern void test_repo_open__open_with_discover(void);
extern void test_repo_open__gitlinked(void);
extern void test_repo_open__from_git_new_workdir(void);
extern void test_repo_open__failures(void);
extern void test_repo_open__bad_gitlinks(void);
extern void test_repo_open__win32_path(void);
extern void test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND(void);
extern void test_repo_open__no_config(void);
extern void test_repo_open__force_bare(void);
extern void test_repo_open__cleanup(void);
extern void test_object_raw_chars__find_invalid_chars_in_oid(void);
extern void test_object_raw_chars__build_valid_oid_from_raw_bytes(void);
extern void test_revwalk_mergebase__single1(void);
extern void test_revwalk_mergebase__single2(void);
extern void test_revwalk_mergebase__merged_branch(void);
extern void test_revwalk_mergebase__two_way_merge(void);
extern void test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__prefer_youngest_merge_base(void);
extern void test_revwalk_mergebase__multiple_merge_bases(void);
extern void test_revwalk_mergebase__multiple_merge_bases_many_commits(void);
extern void test_revwalk_mergebase__no_off_by_one_missing(void);
extern void test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__many_merge_branch(void);
extern void test_revwalk_mergebase__octopus_no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__octopus_merge_branch(void);
extern void test_revwalk_mergebase__initialize(void);
extern void test_revwalk_mergebase__cleanup(void);
extern void test_merge_workdir_setup__one_branch(void);
extern void test_merge_workdir_setup__one_oid(void);
extern void test_merge_workdir_setup__two_branches(void);
extern void test_merge_workdir_setup__three_branches(void);
extern void test_merge_workdir_setup__three_oids(void);
extern void test_merge_workdir_setup__branches_and_oids_1(void);
extern void test_merge_workdir_setup__branches_and_oids_2(void);
extern void test_merge_workdir_setup__branches_and_oids_3(void);
extern void test_merge_workdir_setup__branches_and_oids_4(void);
extern void test_merge_workdir_setup__three_same_branches(void);
extern void test_merge_workdir_setup__three_same_oids(void);
extern void test_merge_workdir_setup__remote_tracking_one_branch(void);
extern void test_merge_workdir_setup__remote_tracking_two_branches(void);
extern void test_merge_workdir_setup__remote_tracking_three_branches(void);
extern void test_merge_workdir_setup__normal_branch_and_remote_tracking_branch(void);
extern void test_merge_workdir_setup__remote_tracking_branch_and_normal_branch(void);
extern void test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches(void);
extern void test_merge_workdir_setup__pull_one(void);
extern void test_merge_workdir_setup__pull_two(void);
extern void test_merge_workdir_setup__pull_three(void);
extern void test_merge_workdir_setup__three_remotes(void);
extern void test_merge_workdir_setup__two_remotes(void);
extern void test_merge_workdir_setup__id_from_head(void);
extern void test_merge_workdir_setup__head_notfound(void);
extern void test_merge_workdir_setup__head_invalid_oid(void);
extern void test_merge_workdir_setup__head_foreach_nonewline(void);
extern void test_merge_workdir_setup__head_foreach_one(void);
extern void test_merge_workdir_setup__head_foreach_octopus(void);
extern void test_merge_workdir_setup__retained_after_success(void);
extern void test_merge_workdir_setup__removed_after_failure(void);
extern void test_merge_workdir_setup__initialize(void);
extern void test_merge_workdir_setup__cleanup(void);
extern void test_object_shortid__select(void);
extern void test_object_shortid__initialize(void);
extern void test_object_shortid__cleanup(void);
extern void test_core_strmap__0(void);
extern void test_core_strmap__1(void);
extern void test_core_strmap__2(void);
extern void test_core_strmap__3(void);
extern void test_core_strmap__initialize(void);
extern void test_core_strmap__cleanup(void);
extern void test_core_oidmap__basic(void);
extern void test_core_oidmap__hash_collision(void);
extern void test_checkout_nasty__dotgit_tree(void);
extern void test_checkout_nasty__dotcapitalgit_tree(void);
extern void test_checkout_nasty__dot_tree(void);
extern void test_checkout_nasty__dot_dotgit_tree(void);
extern void test_checkout_nasty__dotdot_dotgit_tree(void);
extern void test_checkout_nasty__dotdot_tree(void);
extern void test_checkout_nasty__dotgit_path(void);
extern void test_checkout_nasty__dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_dotgit_path(void);
extern void test_checkout_nasty__dot_dotcapitalgit_path(void);
extern void test_checkout_nasty__dotdot_dotgit_path(void);
extern void test_checkout_nasty__dotdot_dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_path(void);
extern void test_checkout_nasty__dot_path_two(void);
extern void test_checkout_nasty__dotdot_path(void);
extern void test_checkout_nasty__dotgit_backslash_path(void);
extern void test_checkout_nasty__dotcapitalgit_backslash_path(void);
extern void test_checkout_nasty__dot_backslash_dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_git_dot(void);
extern void test_checkout_nasty__git_tilde1(void);
extern void test_checkout_nasty__git_custom_shortname(void);
extern void test_checkout_nasty__only_looks_like_a_git_shortname(void);
extern void test_checkout_nasty__dot_git_colon(void);
extern void test_checkout_nasty__dot_git_colon_stuff(void);
extern void test_checkout_nasty__dot_git_hfs_ignorable(void);
extern void test_checkout_nasty__honors_core_protecthfs(void);
extern void test_checkout_nasty__honors_core_protectntfs(void);
extern void test_checkout_nasty__symlink1(void);
extern void test_checkout_nasty__symlink2(void);
extern void test_checkout_nasty__symlink3(void);
extern void test_checkout_nasty__initialize(void);
extern void test_checkout_nasty__cleanup(void);
extern void test_diff_format_email__simple(void);
extern void test_diff_format_email__multiple(void);
extern void test_diff_format_email__exclude_marker(void);
extern void test_diff_format_email__invalid_no(void);
extern void test_diff_format_email__mode_change(void);
extern void test_diff_format_email__rename_add_remove(void);
extern void test_diff_format_email__multiline_summary(void);
extern void test_diff_format_email__binary(void);
extern void test_diff_format_email__initialize(void);
extern void test_diff_format_email__cleanup(void);
extern void test_revwalk_simplify__first_parent(void);
extern void test_revwalk_simplify__cleanup(void);
extern void test_structinit_structinit__compare(void);
extern void test_commit_signature__leading_and_trailing_spaces_are_trimmed(void);
extern void test_commit_signature__angle_brackets_in_names_are_not_supported(void);
extern void test_commit_signature__angle_brackets_in_email_are_not_supported(void);
extern void test_commit_signature__create_empties(void);
extern void test_commit_signature__create_one_char(void);
extern void test_commit_signature__create_two_char(void);
extern void test_commit_signature__create_zero_char(void);
extern void test_refs_unicode__create_and_lookup(void);
extern void test_refs_unicode__initialize(void);
extern void test_refs_unicode__cleanup(void);
extern void test_merge_workdir_dirty__unaffected_dirty_files_allowed(void);
extern void test_merge_workdir_dirty__unstaged_deletes_maintained(void);
extern void test_merge_workdir_dirty__affected_dirty_files_disallowed(void);
extern void test_merge_workdir_dirty__staged_files_in_index_disallowed(void);
extern void test_merge_workdir_dirty__identical_staged_files_allowed(void);
extern void test_merge_workdir_dirty__honors_cache(void);
extern void test_merge_workdir_dirty__initialize(void);
extern void test_merge_workdir_dirty__cleanup(void);
extern void test_path_core__make_relative(void);
extern void test_path_core__isvalid_standard(void);
extern void test_path_core__isvalid_empty_dir_component(void);
extern void test_path_core__isvalid_dot_and_dotdot(void);
extern void test_path_core__isvalid_dot_git(void);
extern void test_path_core__isvalid_backslash(void);
extern void test_path_core__isvalid_trailing_dot(void);
extern void test_path_core__isvalid_trailing_space(void);
extern void test_path_core__isvalid_trailing_colon(void);
extern void test_path_core__isvalid_dotgit_ntfs(void);
extern void test_path_core__isvalid_dos_paths(void);
extern void test_path_core__isvalid_dos_paths_withnum(void);
extern void test_path_core__isvalid_nt_chars(void);
extern void test_path_core__isvalid_dotgit_with_hfs_ignorables(void);
extern void test_path_core__join_unrooted(void);
extern void test_network_refspecs__parsing(void);
extern void test_network_refspecs__transform_mid_star(void);
extern void test_network_refspecs__invalid(void);
extern void test_network_refspecs__invalid_reverse(void);
extern void test_network_refspecs__matching(void);
extern void test_object_raw_short__oid_shortener_no_duplicates(void);
extern void test_object_raw_short__oid_shortener_stresstest_git_oid_shorten(void);
extern void test_object_raw_short__oid_shortener_too_much_oids(void);
extern void test_index_reuc__add(void);
extern void test_index_reuc__add_no_ancestor(void);
extern void test_index_reuc__read_bypath(void);
extern void test_index_reuc__ignore_case(void);
extern void test_index_reuc__read_byindex(void);
extern void test_index_reuc__updates_existing(void);
extern void test_index_reuc__remove(void);
extern void test_index_reuc__write(void);
extern void test_index_reuc__cleaned_on_reset_hard(void);
extern void test_index_reuc__cleaned_on_reset_mixed(void);
extern void test_index_reuc__retained_on_reset_soft(void);
extern void test_index_reuc__cleaned_on_checkout_tree(void);
extern void test_index_reuc__cleaned_on_checkout_head(void);
extern void test_index_reuc__retained_on_checkout_index(void);
extern void test_index_reuc__initialize(void);
extern void test_index_reuc__cleanup(void);
extern void test_status_worktree__whole_repository(void);
extern void test_status_worktree__show_index_and_workdir(void);
extern void test_status_worktree__show_index_only(void);
extern void test_status_worktree__show_workdir_only(void);
extern void test_status_worktree__empty_repository(void);
extern void test_status_worktree__purged_worktree(void);
extern void test_status_worktree__swap_subdir_and_file(void);
extern void test_status_worktree__swap_subdir_with_recurse_and_pathspec(void);
extern void test_status_worktree__single_file(void);
extern void test_status_worktree__single_nonexistent_file(void);
extern void test_status_worktree__single_nonexistent_file_empty_repo(void);
extern void test_status_worktree__single_file_empty_repo(void);
extern void test_status_worktree__single_folder(void);
extern void test_status_worktree__ignores(void);
extern void test_status_worktree__issue_592(void);
extern void test_status_worktree__issue_592_2(void);
extern void test_status_worktree__issue_592_3(void);
extern void test_status_worktree__issue_592_4(void);
extern void test_status_worktree__issue_592_5(void);
extern void test_status_worktree__issue_592_ignores_0(void);
extern void test_status_worktree__issue_592_ignored_dirs_with_tracked_content(void);
extern void test_status_worktree__conflict_with_diff3(void);
extern void test_status_worktree__filemode_changes(void);
extern void test_status_worktree__interruptable_foreach(void);
extern void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf(void);
extern void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397(void);
extern void test_status_worktree__conflicted_item(void);
extern void test_status_worktree__file_status_honors_core_ignorecase_true(void);
extern void test_status_worktree__file_status_honors_core_ignorecase_false(void);
extern void test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files(void);
extern void test_status_worktree__simple_delete(void);
extern void test_status_worktree__simple_delete_indexed(void);
extern void test_status_worktree__sorting_by_case(void);
extern void test_status_worktree__long_filenames(void);
extern void test_status_worktree__update_stat_cache_0(void);
extern void test_status_worktree__unreadable(void);
extern void test_status_worktree__unreadable_not_included(void);
extern void test_status_worktree__unreadable_as_untracked(void);
extern void test_status_worktree__cleanup(void);
extern void test_core_rmdir__delete_recursive(void);
extern void test_core_rmdir__fail_to_delete_non_empty_dir(void);
extern void test_core_rmdir__can_skip_non_empty_dir(void);
extern void test_core_rmdir__can_remove_empty_parents(void);
extern void test_core_rmdir__initialize(void);
extern void test_commit_parent__can_retrieve_nth_generation_parent(void);
extern void test_commit_parent__initialize(void);
extern void test_commit_parent__cleanup(void);
extern void test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry(void);
extern void test_refs_createwithlog__initialize(void);
extern void test_refs_createwithlog__cleanup(void);
extern void test_diff_patch__can_properly_display_the_removal_of_a_file(void);
extern void test_diff_patch__can_cancel_diff_print(void);
extern void test_diff_patch__to_string(void);
extern void test_diff_patch__config_options(void);
extern void test_diff_patch__hunks_have_correct_line_numbers(void);
extern void test_diff_patch__line_counts_with_eofnl(void);
extern void test_diff_patch__initialize(void);
extern void test_diff_patch__cleanup(void);
extern void test_repo_shallow__no_shallow_file(void);
extern void test_repo_shallow__empty_shallow_file(void);
extern void test_repo_shallow__shallow_repo(void);
extern void test_repo_shallow__clears_errors(void);
extern void test_repo_shallow__initialize(void);
extern void test_repo_shallow__cleanup(void);
extern void test_odb_sorting__basic_backends_sorting(void);
extern void test_odb_sorting__alternate_backends_sorting(void);
extern void test_odb_sorting__initialize(void);
extern void test_odb_sorting__cleanup(void);
extern void test_core_pqueue__items_are_put_in_order(void);
extern void test_core_pqueue__interleave_inserts_and_pops(void);
extern void test_core_pqueue__max_heap_size(void);
extern void test_core_pqueue__interleaved_pushes_and_pops(void);
extern void test_core_sortedcache__name_only(void);
extern void test_core_sortedcache__in_memory(void);
extern void test_core_sortedcache__on_disk(void);
extern void test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it(void);
extern void test_object_peel__tag(void);
extern void test_object_peel__commit(void);
extern void test_object_peel__tree(void);
extern void test_object_peel__blob(void);
extern void test_object_peel__target_any_object_for_type_change(void);
extern void test_object_peel__initialize(void);
extern void test_object_peel__cleanup(void);
extern void test_index_filemodes__read(void);
extern void test_index_filemodes__untrusted(void);
extern void test_index_filemodes__trusted(void);
extern void test_index_filemodes__invalid(void);
extern void test_index_filemodes__initialize(void);
extern void test_index_filemodes__cleanup(void);
extern void test_index_inmemory__can_create_an_inmemory_index(void);
extern void test_index_inmemory__cannot_add_bypath_to_an_inmemory_index(void);
extern void test_diff_diffiter__create(void);
extern void test_diff_diffiter__iterate_files_1(void);
extern void test_diff_diffiter__iterate_files_2(void);
extern void test_diff_diffiter__iterate_files_and_hunks(void);
extern void test_diff_diffiter__max_size_threshold(void);
extern void test_diff_diffiter__iterate_all(void);
extern void test_diff_diffiter__iterate_randomly_while_saving_state(void);
extern void test_diff_diffiter__iterate_and_generate_patch_text(void);
extern void test_diff_diffiter__checks_options_version(void);
extern void test_diff_diffiter__initialize(void);
extern void test_diff_diffiter__cleanup(void);
extern void test_filter_ident__to_worktree(void);
extern void test_filter_ident__to_odb(void);
extern void test_filter_ident__initialize(void);
extern void test_filter_ident__cleanup(void);
extern void test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit(void);
extern void test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit(void);
extern void test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head(void);
extern void test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit(void);
extern void test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit(void);
extern void test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn(void);
extern void test_reset_soft__fails_when_merging(void);
extern void test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence(void);
extern void test_reset_soft__initialize(void);
extern void test_reset_soft__cleanup(void);
extern void test_merge_trees_automerge__automerge(void);
extern void test_merge_trees_automerge__favor_ours(void);
extern void test_merge_trees_automerge__favor_theirs(void);
extern void test_merge_trees_automerge__unrelated(void);
extern void test_merge_trees_automerge__initialize(void);
extern void test_merge_trees_automerge__cleanup(void);
extern void test_refs_reflog_reflog__append_then_read(void);
extern void test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog(void);
extern void test_refs_reflog_reflog__reference_has_reflog(void);
extern void test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one(void);
extern void test_refs_reflog_reflog__cannot_write_a_moved_reflog(void);
extern void test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_reflog_reflog__write_only_std_locations(void);
extern void test_refs_reflog_reflog__write_when_explicitly_active(void);
extern void test_refs_reflog_reflog__append_to_HEAD_when_changing_current_branch(void);
extern void test_refs_reflog_reflog__do_not_append_when_no_update(void);
extern void test_refs_reflog_reflog__logallrefupdates_bare_set_false(void);
extern void test_refs_reflog_reflog__logallrefupdates_bare_unset(void);
extern void test_refs_reflog_reflog__logallrefupdates_nonbare_set_false(void);
extern void test_refs_reflog_reflog__initialize(void);
extern void test_refs_reflog_reflog__cleanup(void);
extern void test_core_bitvec__0(void);
extern void test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS(void);
extern void test_config_configlevel__can_replace_a_config_file_at_an_existing_level(void);
extern void test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed(void);
extern void test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND(void);
extern void test_core_mkdir__basic(void);
extern void test_core_mkdir__with_base(void);
extern void test_core_mkdir__chmods(void);
extern void test_core_mkdir__mkdir_path_inside_unwriteable_parent(void);
extern void test_checkout_conflict__ignored(void);
extern void test_checkout_conflict__ours(void);
extern void test_checkout_conflict__theirs(void);
extern void test_checkout_conflict__diff3(void);
extern void test_checkout_conflict__automerge(void);
extern void test_checkout_conflict__directory_file(void);
extern void test_checkout_conflict__directory_file_with_custom_labels(void);
extern void test_checkout_conflict__link_file(void);
extern void test_checkout_conflict__links(void);
extern void test_checkout_conflict__add_add(void);
extern void test_checkout_conflict__mode_change(void);
extern void test_checkout_conflict__renames(void);
extern void test_checkout_conflict__rename_keep_ours(void);
extern void test_checkout_conflict__name_mangled_file_exists_in_workdir(void);
extern void test_checkout_conflict__update_only(void);
extern void test_checkout_conflict__path_filters(void);
extern void test_checkout_conflict__report_progress(void);
extern void test_checkout_conflict__initialize(void);
extern void test_checkout_conflict__cleanup(void);
extern void test_network_matchhost__match(void);
extern void test_pack_sharing__open_two_repos(void);
extern void test_commit_parse__header(void);
extern void test_commit_parse__signature(void);
extern void test_commit_parse__entire_commit(void);
extern void test_commit_parse__details0(void);
extern void test_commit_parse__leading_lf(void);
extern void test_commit_parse__only_lf(void);
extern void test_commit_parse__initialize(void);
extern void test_commit_parse__cleanup(void);
extern void test_threads_refdb__iterator(void);
extern void test_threads_refdb__edit_while_iterate(void);
extern void test_threads_refdb__initialize(void);
extern void test_threads_refdb__cleanup(void);
extern void test_config_validkeyname__accessing_requires_a_valid_name(void);
extern void test_config_validkeyname__initialize(void);
extern void test_config_validkeyname__cleanup(void);
extern void test_refs_pack__empty(void);
extern void test_refs_pack__loose(void);
extern void test_refs_pack__symbolic(void);
extern void test_refs_pack__initialize(void);
extern void test_refs_pack__cleanup(void);
extern void test_transport_register__custom_transport(void);
extern void test_transport_register__custom_transport_error_doubleregister(void);
extern void test_transport_register__custom_transport_error_remove_non_existing(void);
extern void test_transport_register__custom_transport_ssh(void);
extern void test_clone_local__should_clone_local(void);
extern void test_clone_local__hardlinks(void);
extern void test_clone_local__standard_unc_paths_are_written_git_style(void);
extern void test_clone_local__git_style_unc_paths(void);
extern void test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch(void);
extern void test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch(void);
extern void test_refs_branches_upstreamname__initialize(void);
extern void test_refs_branches_upstreamname__cleanup(void);
extern void test_odb_streamwrite__can_accept_chunks(void);
extern void test_odb_streamwrite__can_detect_missing_bytes(void);
extern void test_odb_streamwrite__can_detect_additional_bytes(void);
extern void test_odb_streamwrite__initialize(void);
extern void test_odb_streamwrite__cleanup(void);
extern void test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index(void);
extern void test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries(void);
extern void test_reset_default__resetting_filepaths_clears_previous_conflicts(void);
extern void test_reset_default__resetting_unknown_filepaths_does_not_fail(void);
extern void test_reset_default__staged_rename_reset_delete(void);
extern void test_reset_default__initialize(void);
extern void test_reset_default__cleanup(void);
extern void test_diff_binary__add_normal(void);
extern void test_diff_binary__add(void);
extern void test_diff_binary__modify_normal(void);
extern void test_diff_binary__modify(void);
extern void test_diff_binary__delete_normal(void);
extern void test_diff_binary__delete(void);
extern void test_diff_binary__delta(void);
extern void test_diff_binary__delta_append(void);
extern void test_diff_binary__initialize(void);
extern void test_diff_binary__cleanup(void);
extern void test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry(void);
extern void test_refs_settargetwithlog__initialize(void);
extern void test_refs_settargetwithlog__cleanup(void);
extern void test_core_dirent__dont_traverse_dot(void);
extern void test_core_dirent__traverse_subfolder(void);
extern void test_core_dirent__traverse_slash_terminated_folder(void);
extern void test_core_dirent__dont_traverse_empty_folders(void);
extern void test_core_dirent__traverse_weird_filenames(void);
extern void test_core_dirent__length_limits(void);
extern void test_core_dirent__empty_dir(void);
extern void test_refs_transactions__single_ref_oid(void);
extern void test_refs_transactions__single_ref_symbolic(void);
extern void test_refs_transactions__single_ref_mix_types(void);
extern void test_refs_transactions__single_ref_delete(void);
extern void test_refs_transactions__single_create(void);
extern void test_refs_transactions__unlocked_set(void);
extern void test_refs_transactions__initialize(void);
extern void test_refs_transactions__cleanup(void);
extern void test_graph_descendant_of__returns_correct_result(void);
extern void test_graph_descendant_of__nopath(void);
extern void test_graph_descendant_of__initialize(void);
extern void test_graph_descendant_of__cleanup(void);
extern void test_clone_nonetwork__bad_urls(void);
extern void test_clone_nonetwork__do_not_clean_existing_directory(void);
extern void test_clone_nonetwork__local(void);
extern void test_clone_nonetwork__local_absolute_path(void);
extern void test_clone_nonetwork__local_bare(void);
extern void test_clone_nonetwork__fail_when_the_target_is_a_file(void);
extern void test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory(void);
extern void test_clone_nonetwork__custom_origin_name(void);
extern void test_clone_nonetwork__defaults(void);
extern void test_clone_nonetwork__cope_with_already_existing_directory(void);
extern void test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo(void);
extern void test_clone_nonetwork__can_checkout_given_branch(void);
extern void test_clone_nonetwork__can_cancel_clone_in_fetch(void);
extern void test_clone_nonetwork__can_cancel_clone_in_checkout(void);
extern void test_clone_nonetwork__can_detached_head(void);
extern void test_clone_nonetwork__clone_updates_reflog_properly(void);
extern void test_clone_nonetwork__clone_from_empty_sets_upstream(void);
extern void test_clone_nonetwork__initialize(void);
extern void test_clone_nonetwork__cleanup(void);
extern void test_index_tests__empty_index(void);
extern void test_index_tests__default_test_index(void);
extern void test_index_tests__gitgit_index(void);
extern void test_index_tests__find_in_existing(void);
extern void test_index_tests__find_in_empty(void);
extern void test_index_tests__write(void);
extern void test_index_tests__sort0(void);
extern void test_index_tests__sort1(void);
extern void test_index_tests__add(void);
extern void test_index_tests__add_issue_1397(void);
extern void test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO(void);
extern void test_index_tests__add_invalid_filename(void);
extern void test_index_tests__write_invalid_filename(void);
extern void test_index_tests__honors_protect_filesystems(void);
extern void test_index_tests__remove_entry(void);
extern void test_index_tests__remove_directory(void);
extern void test_index_tests__preserves_case(void);
extern void test_index_tests__elocked(void);
extern void test_index_tests__reload_from_disk(void);
extern void test_index_tests__corrupted_extension(void);
extern void test_index_tests__reload_while_ignoring_case(void);
extern void test_index_tests__initialize(void);
extern void test_commit_commit__create_unexisting_update_ref(void);
extern void test_commit_commit__summary(void);
extern void test_commit_commit__initialize(void);
extern void test_commit_commit__cleanup(void);
extern void test_blame_getters__byindex(void);
extern void test_blame_getters__byline(void);
extern void test_blame_getters__initialize(void);
extern void test_blame_getters__cleanup(void);
extern void test_blame_harder__m(void);
extern void test_blame_harder__c(void);
extern void test_blame_harder__cc(void);
extern void test_blame_harder__ccc(void);
extern void test_blame_harder__initialize(void);
extern void test_blame_harder__cleanup(void);
extern void test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_update__initialize(void);
extern void test_refs_update__cleanup(void);
extern void test_checkout_tree__cannot_checkout_a_non_treeish(void);
extern void test_checkout_tree__can_checkout_a_subdirectory_from_a_commit(void);
extern void test_checkout_tree__can_checkout_and_remove_directory(void);
extern void test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree(void);
extern void test_checkout_tree__calls_progress_callback(void);
extern void test_checkout_tree__doesnt_write_unrequested_files_to_worktree(void);
extern void test_checkout_tree__can_switch_branches(void);
extern void test_checkout_tree__can_remove_untracked(void);
extern void test_checkout_tree__can_remove_ignored(void);
extern void test_checkout_tree__conflict_on_ignored_when_not_overwriting(void);
extern void test_checkout_tree__can_overwrite_ignored_by_default(void);
extern void test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting(void);
extern void test_checkout_tree__can_overwrite_ignored_folder_by_default(void);
extern void test_checkout_tree__can_update_only(void);
extern void test_checkout_tree__can_checkout_with_pattern(void);
extern void test_checkout_tree__can_disable_pattern_match(void);
extern void test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT(void);
extern void test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT_2(void);
extern void test_checkout_tree__checking_out_a_conflicting_content_change_returns_EMERGECONFLICT(void);
extern void test_checkout_tree__donot_update_deleted_file_by_default(void);
extern void test_checkout_tree__can_cancel_checkout_from_notify(void);
extern void test_checkout_tree__can_checkout_with_last_workdir_item_missing(void);
extern void test_checkout_tree__issue_1397(void);
extern void test_checkout_tree__can_write_to_empty_dirs(void);
extern void test_checkout_tree__fails_when_dir_in_use(void);
extern void test_checkout_tree__can_continue_when_dir_in_use(void);
extern void test_checkout_tree__target_directory_from_bare(void);
extern void test_checkout_tree__extremely_long_file_name(void);
extern void test_checkout_tree__fails_when_conflicts_exist_in_index(void);
extern void test_checkout_tree__filemode_preserved_in_index(void);
extern void test_checkout_tree__removes_conflicts(void);
extern void test_checkout_tree__removes_conflicts_only_by_pathscope(void);
extern void test_checkout_tree__case_changing_rename(void);
extern void test_checkout_tree__initialize(void);
extern void test_checkout_tree__cleanup(void);
extern void test_index_conflicts__add(void);
extern void test_index_conflicts__add_fixes_incorrect_stage(void);
extern void test_index_conflicts__get(void);
extern void test_index_conflicts__iterate(void);
extern void test_index_conflicts__remove(void);
extern void test_index_conflicts__moved_to_reuc_on_add(void);
extern void test_index_conflicts__moved_to_reuc_on_remove(void);
extern void test_index_conflicts__remove_all_conflicts(void);
extern void test_index_conflicts__partial(void);
extern void test_index_conflicts__initialize(void);
extern void test_index_conflicts__cleanup(void);
extern void test_checkout_index__cannot_checkout_a_bare_repository(void);
extern void test_checkout_index__can_create_missing_files(void);
extern void test_checkout_index__can_remove_untracked_files(void);
extern void test_checkout_index__honor_the_specified_pathspecs(void);
extern void test_checkout_index__honor_the_gitattributes_directives(void);
extern void test_checkout_index__honor_coreautocrlf_setting_set_to_true(void);
extern void test_checkout_index__honor_coresymlinks_setting_set_to_true(void);
extern void test_checkout_index__honor_coresymlinks_setting_set_to_false(void);
extern void test_checkout_index__donot_overwrite_modified_file_by_default(void);
extern void test_checkout_index__can_overwrite_modified_file(void);
extern void test_checkout_index__options_disable_filters(void);
extern void test_checkout_index__options_dir_modes(void);
extern void test_checkout_index__options_override_file_modes(void);
extern void test_checkout_index__options_open_flags(void);
extern void test_checkout_index__can_notify_of_skipped_files(void);
extern void test_checkout_index__wont_notify_of_expected_line_ending_changes(void);
extern void test_checkout_index__calls_progress_callback(void);
extern void test_checkout_index__can_overcome_name_clashes(void);
extern void test_checkout_index__validates_struct_version(void);
extern void test_checkout_index__can_update_prefixed_files(void);
extern void test_checkout_index__can_checkout_a_newly_initialized_repository(void);
extern void test_checkout_index__issue_1397(void);
extern void test_checkout_index__target_directory(void);
extern void test_checkout_index__target_directory_from_bare(void);
extern void test_checkout_index__can_get_repo_from_index(void);
extern void test_checkout_index__writes_conflict_file(void);
extern void test_checkout_index__adding_conflict_removes_stage_0(void);
extern void test_checkout_index__conflicts_honor_coreautocrlf(void);
extern void test_checkout_index__initialize(void);
extern void test_checkout_index__cleanup(void);
extern void test_index_stage__add_always_adds_stage_0(void);
extern void test_index_stage__find_gets_first_stage(void);
extern void test_index_stage__initialize(void);
extern void test_index_stage__cleanup(void);
extern void test_blame_simple__trivial_testrepo(void);
extern void test_blame_simple__trivial_blamerepo(void);
extern void test_blame_simple__trivial_libgit2(void);
extern void test_blame_simple__can_restrict_lines_min(void);
extern void test_blame_simple__can_restrict_lines_max(void);
extern void test_blame_simple__can_restrict_lines_both(void);
extern void test_blame_simple__can_restrict_to_newish_commits(void);
extern void test_blame_simple__can_restrict_to_first_parent_commits(void);
extern void test_blame_simple__initialize(void);
extern void test_blame_simple__cleanup(void);
extern void test_core_copy__file(void);
extern void test_core_copy__file_in_dir(void);
extern void test_core_copy__tree(void);
extern void test_core_link__stat_regular_file(void);
extern void test_core_link__lstat_regular_file(void);
extern void test_core_link__stat_symlink(void);
extern void test_core_link__stat_symlink_directory(void);
extern void test_core_link__stat_symlink_chain(void);
extern void test_core_link__stat_dangling_symlink(void);
extern void test_core_link__stat_dangling_symlink_directory(void);
extern void test_core_link__lstat_symlink(void);
extern void test_core_link__lstat_symlink_directory(void);
extern void test_core_link__lstat_dangling_symlink(void);
extern void test_core_link__lstat_dangling_symlink_directory(void);
extern void test_core_link__stat_junction(void);
extern void test_core_link__stat_dangling_junction(void);
extern void test_core_link__lstat_junction(void);
extern void test_core_link__lstat_dangling_junction(void);
extern void test_core_link__stat_hardlink(void);
extern void test_core_link__lstat_hardlink(void);
extern void test_core_link__stat_reparse_point(void);
extern void test_core_link__lstat_reparse_point(void);
extern void test_core_link__readlink_nonexistent_file(void);
extern void test_core_link__readlink_normal_file(void);
extern void test_core_link__readlink_symlink(void);
extern void test_core_link__readlink_dangling(void);
extern void test_core_link__readlink_multiple(void);
extern void test_core_link__cleanup(void);
extern void test_diff_submodules__unmodified_submodule(void);
extern void test_diff_submodules__dirty_submodule(void);
extern void test_diff_submodules__dirty_submodule_2(void);
extern void test_diff_submodules__submod2_index_to_wd(void);
extern void test_diff_submodules__submod2_head_to_index(void);
extern void test_diff_submodules__invalid_cache(void);
extern void test_diff_submodules__diff_ignore_options(void);
extern void test_diff_submodules__skips_empty_includes_used(void);
extern void test_diff_submodules__initialize(void);
extern void test_diff_submodules__cleanup(void);
extern void test_object_raw_type2string__convert_type_to_string(void);
extern void test_object_raw_type2string__convert_string_to_type(void);
extern void test_object_raw_type2string__check_type_is_loose(void);
extern void test_attr_file__simple_read(void);
extern void test_attr_file__match_variants(void);
extern void test_attr_file__assign_variants(void);
extern void test_attr_file__check_attr_examples(void);
extern void test_refs_branches_name__can_get_local_branch_name(void);
extern void test_refs_branches_name__can_get_remote_branch_name(void);
extern void test_refs_branches_name__error_when_ref_is_no_branch(void);
extern void test_refs_branches_name__initialize(void);
extern void test_refs_branches_name__cleanup(void);
extern void test_attr_flags__bare(void);
extern void test_attr_flags__index_vs_workdir(void);
extern void test_attr_flags__subdir(void);
extern void test_attr_flags__cleanup(void);
extern void test_refs_crashes__double_free(void);
extern void test_merge_files__automerge_from_bufs(void);
extern void test_merge_files__automerge_use_best_path_and_mode(void);
extern void test_merge_files__conflict_from_bufs(void);
extern void test_merge_files__automerge_from_index(void);
extern void test_merge_files__initialize(void);
extern void test_merge_files__cleanup(void);
extern void test_core_features__0(void);
extern void test_merge_trees_renames__index(void);
extern void test_merge_trees_renames__no_rename_index(void);
extern void test_merge_trees_renames__initialize(void);
extern void test_merge_trees_renames__cleanup(void);
extern void test_network_remote_createthenload__parsing(void);
extern void test_network_remote_createthenload__initialize(void);
extern void test_network_remote_createthenload__cleanup(void);
extern void test_odb_packed__mass_read(void);
extern void test_odb_packed__read_header_0(void);
extern void test_odb_packed__read_header_1(void);
extern void test_odb_packed__initialize(void);
extern void test_odb_packed__cleanup(void);
extern void test_submodule_nosubs__lookup(void);
extern void test_submodule_nosubs__immediate_reload(void);
extern void test_submodule_nosubs__foreach(void);
extern void test_submodule_nosubs__add(void);
extern void test_submodule_nosubs__reload_add_reload(void);
extern void test_submodule_nosubs__bad_gitmodules(void);
extern void test_submodule_nosubs__add_and_delete(void);
extern void test_submodule_nosubs__cleanup(void);
extern void test_cherrypick_bare__automerge(void);
extern void test_cherrypick_bare__conflicts(void);
extern void test_cherrypick_bare__orphan(void);
extern void test_cherrypick_bare__initialize(void);
extern void test_cherrypick_bare__cleanup(void);
extern void test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND(void);
extern void test_refs_reflog_drop__can_drop_an_entry(void);
extern void test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history(void);
extern void test_refs_reflog_drop__can_drop_the_oldest_entry(void);
extern void test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history(void);
extern void test_refs_reflog_drop__can_drop_all_the_entries(void);
extern void test_refs_reflog_drop__can_persist_deletion_on_disk(void);
extern void test_refs_reflog_drop__initialize(void);
extern void test_refs_reflog_drop__cleanup(void);
extern void test_online_push__noop(void);
extern void test_online_push__b1(void);
extern void test_online_push__b2(void);
extern void test_online_push__b3(void);
extern void test_online_push__b4(void);
extern void test_online_push__b5(void);
extern void test_online_push__b5_cancel(void);
extern void test_online_push__multi(void);
extern void test_online_push__implicit_tgt(void);
extern void test_online_push__fast_fwd(void);
extern void test_online_push__tag_commit(void);
extern void test_online_push__tag_tree(void);
extern void test_online_push__tag_blob(void);
extern void test_online_push__tag_lightweight(void);
extern void test_online_push__tag_to_tag(void);
extern void test_online_push__force(void);
extern void test_online_push__delete(void);
extern void test_online_push__bad_refspecs(void);
extern void test_online_push__expressions(void);
extern void test_online_push__notes(void);
extern void test_online_push__configured(void);
extern void test_online_push__initialize(void);
extern void test_online_push__cleanup(void);
extern void test_trace_trace__sets(void);
extern void test_trace_trace__can_reset(void);
extern void test_trace_trace__can_unset(void);
extern void test_trace_trace__skips_higher_level(void);
extern void test_trace_trace__writes(void);
extern void test_trace_trace__writes_lower_level(void);
extern void test_trace_trace__initialize(void);
extern void test_trace_trace__cleanup(void);
extern void test_object_raw_hash__hash_by_blocks(void);
extern void test_object_raw_hash__hash_buffer_in_single_call(void);
extern void test_object_raw_hash__hash_vector(void);
extern void test_object_raw_hash__hash_junk_data(void);
extern void test_object_raw_hash__hash_commit_object(void);
extern void test_object_raw_hash__hash_tree_object(void);
extern void test_object_raw_hash__hash_tag_object(void);
extern void test_object_raw_hash__hash_zero_length_object(void);
extern void test_object_raw_hash__hash_one_byte_object(void);
extern void test_object_raw_hash__hash_two_byte_object(void);
extern void test_object_raw_hash__hash_multi_byte_object(void);
extern void test_checkout_binaryunicode__noautocrlf(void);
extern void test_checkout_binaryunicode__autocrlf(void);
extern void test_checkout_binaryunicode__initialize(void);
extern void test_checkout_binaryunicode__cleanup(void);
extern void test_odb_emptyobjects__read(void);
extern void test_odb_emptyobjects__read_tree(void);
extern void test_odb_emptyobjects__read_tree_odb(void);
extern void test_odb_emptyobjects__initialize(void);
extern void test_odb_emptyobjects__cleanup(void);
extern void test_object_blob_filter__unfiltered(void);
extern void test_object_blob_filter__stats(void);
extern void test_object_blob_filter__to_odb(void);
extern void test_object_blob_filter__initialize(void);
extern void test_object_blob_filter__cleanup(void);
extern void test_core_strtol__int32(void);
extern void test_core_strtol__int64(void);
extern void test_core_stat__0(void);
extern void test_core_stat__root(void);
extern void test_core_stat__initialize(void);
extern void test_core_stat__cleanup(void);
extern void test_diff_pathspec__0(void);
extern void test_diff_pathspec__initialize(void);
extern void test_diff_pathspec__cleanup(void);
extern void test_index_collision__add(void);
extern void test_index_collision__add_with_highstage_1(void);
extern void test_index_collision__add_with_highstage_2(void);
extern void test_index_collision__cleanup(void);
extern void test_merge_trees_treediff__simple(void);
extern void test_merge_trees_treediff__df_conflicts(void);
extern void test_merge_trees_treediff__strict_renames(void);
extern void test_merge_trees_treediff__rename_conflicts(void);
extern void test_merge_trees_treediff__best_renames(void);
extern void test_merge_trees_treediff__initialize(void);
extern void test_merge_trees_treediff__cleanup(void);
extern void test_object_lookupbypath__errors(void);
extern void test_object_lookupbypath__from_root_tree(void);
extern void test_object_lookupbypath__from_head_commit(void);
extern void test_object_lookupbypath__from_subdir_tree(void);
extern void test_object_lookupbypath__initialize(void);
extern void test_object_lookupbypath__cleanup(void);
extern void test_object_tag_list__list_all(void);
extern void test_object_tag_list__list_by_pattern(void);
extern void test_object_tag_list__initialize(void);
extern void test_object_tag_list__cleanup(void);
extern void test_clone_empty__can_clone_an_empty_local_repo_barely(void);
extern void test_clone_empty__can_clone_an_empty_local_repo(void);
extern void test_clone_empty__can_clone_an_empty_standard_repo(void);
extern void test_clone_empty__initialize(void);
extern void test_clone_empty__cleanup(void);
extern void test_diff_iterator__tree_0(void);
extern void test_diff_iterator__tree_1(void);
extern void test_diff_iterator__tree_2(void);
extern void test_diff_iterator__tree_3(void);
extern void test_diff_iterator__tree_4(void);
extern void test_diff_iterator__tree_4_ranged(void);
extern void test_diff_iterator__tree_ranged_0(void);
extern void test_diff_iterator__tree_ranged_1(void);
extern void test_diff_iterator__tree_range_empty_0(void);
extern void test_diff_iterator__tree_range_empty_1(void);
extern void test_diff_iterator__tree_range_empty_2(void);
extern void test_diff_iterator__tree_special_functions(void);
extern void test_diff_iterator__index_0(void);
extern void test_diff_iterator__index_range(void);
extern void test_diff_iterator__index_range_empty_0(void);
extern void test_diff_iterator__index_range_empty_1(void);
extern void test_diff_iterator__index_range_empty_2(void);
extern void test_diff_iterator__index_1(void);
extern void test_diff_iterator__index_case_folding(void);
extern void test_diff_iterator__workdir_0(void);
extern void test_diff_iterator__workdir_1(void);
extern void test_diff_iterator__workdir_1_ranged_0(void);
extern void test_diff_iterator__workdir_1_ranged_1(void);
extern void test_diff_iterator__workdir_1_ranged_3(void);
extern void test_diff_iterator__workdir_1_ranged_4(void);
extern void test_diff_iterator__workdir_1_ranged_5(void);
extern void test_diff_iterator__workdir_1_ranged_empty_0(void);
extern void test_diff_iterator__workdir_1_ranged_empty_1(void);
extern void test_diff_iterator__workdir_1_ranged_empty_2(void);
extern void test_diff_iterator__workdir_builtin_ignores(void);
extern void test_diff_iterator__workdir_handles_icase_range(void);
extern void test_diff_iterator__tree_handles_icase_range(void);
extern void test_diff_iterator__index_handles_icase_range(void);
extern void test_diff_iterator__initialize(void);
extern void test_diff_iterator__cleanup(void);
extern void test_core_vector__0(void);
extern void test_core_vector__1(void);
extern void test_core_vector__2(void);
extern void test_core_vector__3(void);
extern void test_core_vector__4(void);
extern void test_core_vector__5(void);
extern void test_core_vector__remove_matching(void);
extern void test_config_read__simple_read(void);
extern void test_config_read__case_sensitive(void);
extern void test_config_read__multiline_value(void);
extern void test_config_read__subsection_header(void);
extern void test_config_read__lone_variable(void);
extern void test_config_read__number_suffixes(void);
extern void test_config_read__blank_lines(void);
extern void test_config_read__invalid_ext_headers(void);
extern void test_config_read__empty_files(void);
extern void test_config_read__symbol_headers(void);
extern void test_config_read__header_in_last_line(void);
extern void test_config_read__prefixes(void);
extern void test_config_read__escaping_quotes(void);
extern void test_config_read__foreach(void);
extern void test_config_read__iterator(void);
extern void test_config_read__foreach_match(void);
extern void test_config_read__iterator_invalid_glob(void);
extern void test_config_read__iterator_glob(void);
extern void test_config_read__whitespace_not_required_around_assignment(void);
extern void test_config_read__read_git_config_entry(void);
extern void test_config_read__local_config_overrides_global_config_overrides_system_config(void);
extern void test_config_read__fallback_from_local_to_global_and_from_global_to_system(void);
extern void test_config_read__simple_read_from_specific_level(void);
extern void test_config_read__can_load_and_parse_an_empty_config_file(void);
extern void test_config_read__corrupt_header(void);
extern void test_config_read__corrupt_header2(void);
extern void test_config_read__corrupt_header3(void);
extern void test_config_read__override_variable(void);
extern void test_submodule_repository_init__basic(void);
extern void test_rebase_merge__next(void);
extern void test_rebase_merge__next_with_conflicts(void);
extern void test_rebase_merge__next_stops_with_iterover(void);
extern void test_rebase_merge__commit(void);
extern void test_rebase_merge__commit_updates_rewritten(void);
extern void test_rebase_merge__commit_drops_already_applied(void);
extern void test_rebase_merge__finish(void);
extern void test_rebase_merge__copy_notes_off_by_default(void);
extern void test_rebase_merge__copy_notes_specified_in_options(void);
extern void test_rebase_merge__copy_notes_specified_in_config(void);
extern void test_rebase_merge__copy_notes_disabled_in_config(void);
extern void test_rebase_merge__initialize(void);
extern void test_rebase_merge__cleanup(void);
extern void test_odb_alternates__chained(void);
extern void test_odb_alternates__long_chain(void);
extern void test_odb_alternates__cleanup(void);
extern void test_merge_trees_trivial__2alt(void);
extern void test_merge_trees_trivial__3alt(void);
extern void test_merge_trees_trivial__4(void);
extern void test_merge_trees_trivial__5alt_1(void);
extern void test_merge_trees_trivial__5alt_2(void);
extern void test_merge_trees_trivial__6(void);
extern void test_merge_trees_trivial__8(void);
extern void test_merge_trees_trivial__7(void);
extern void test_merge_trees_trivial__10(void);
extern void test_merge_trees_trivial__9(void);
extern void test_merge_trees_trivial__13(void);
extern void test_merge_trees_trivial__14(void);
extern void test_merge_trees_trivial__11(void);
extern void test_merge_trees_trivial__initialize(void);
extern void test_merge_trees_trivial__cleanup(void);
extern void test_core_posix__inet_pton(void);
extern void test_core_posix__initialize(void);
extern void test_core_env__0(void);
extern void test_core_env__1(void);
extern void test_core_env__2(void);
extern void test_core_env__initialize(void);
extern void test_core_env__cleanup(void);
extern void test_clone_transport__custom_transport(void);
extern void test_online_clone__network_full(void);
extern void test_online_clone__network_bare(void);
extern void test_online_clone__empty_repository(void);
extern void test_online_clone__can_checkout_a_cloned_repo(void);
extern void test_online_clone__clone_mirror(void);
extern void test_online_clone__custom_remote_callbacks(void);
extern void test_online_clone__cred_callback_failure_return_code_is_tunnelled(void);
extern void test_online_clone__cred_callback_called_again_on_auth_failure(void);
extern void test_online_clone__credentials(void);
extern void test_online_clone__bitbucket_style(void);
extern void test_online_clone__can_cancel(void);
extern void test_online_clone__ssh_auth_methods(void);
extern void test_online_clone__ssh_with_paths(void);
extern void test_online_clone__ssh_cannot_change_username(void);
extern void test_online_clone__ssh_cert(void);
extern void test_online_clone__url_with_no_path_returns_EINVALIDSPEC(void);
extern void test_online_clone__certificate_invalid(void);
extern void test_online_clone__certificate_valid(void);
extern void test_online_clone__initialize(void);
extern void test_online_clone__cleanup(void);
extern void test_status_single__hash_single_file(void);
extern void test_status_single__hash_single_empty_file(void);
extern void test_odb_loose__exists(void);
extern void test_odb_loose__simple_reads(void);
extern void test_odb_loose__permissions_standard(void);
extern void test_odb_loose__permissions_readwrite(void);
extern void test_odb_loose__initialize(void);
extern void test_odb_loose__cleanup(void);
extern void test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets(void);
extern void test_revwalk_signatureparsing__initialize(void);
extern void test_revwalk_signatureparsing__cleanup(void);
extern void test_submodule_status__unchanged(void);
extern void test_submodule_status__ignore_none(void);
extern void test_submodule_status__ignore_untracked(void);
extern void test_submodule_status__ignore_dirty(void);
extern void test_submodule_status__ignore_all(void);
extern void test_submodule_status__iterator(void);
extern void test_submodule_status__untracked_dirs_containing_ignored_files(void);
extern void test_submodule_status__initialize(void);
extern void test_submodule_status__cleanup(void);
extern void test_checkout_typechange__checkout_typechanges_safe(void);
extern void test_checkout_typechange__checkout_with_conflicts(void);
extern void test_checkout_typechange__initialize(void);
extern void test_checkout_typechange__cleanup(void);
extern void test_refs_branches_remote__can_get_remote_for_branch(void);
extern void test_refs_branches_remote__no_matching_remote_returns_error(void);
extern void test_refs_branches_remote__local_remote_returns_error(void);
extern void test_refs_branches_remote__ambiguous_remote_returns_error(void);
extern void test_refs_branches_remote__initialize(void);
extern void test_refs_branches_remote__cleanup(void);
extern void test_config_include__relative(void);
extern void test_config_include__absolute(void);
extern void test_config_include__homedir(void);
extern void test_config_include__ordering(void);
extern void test_config_include__depth(void);
extern void test_config_include__missing(void);
extern void test_core_iconv__unchanged(void);
extern void test_core_iconv__decomposed_to_precomposed(void);
extern void test_core_iconv__precomposed_is_unmodified(void);
extern void test_core_iconv__initialize(void);
extern void test_core_iconv__cleanup(void);
extern void test_core_filebuf__0(void);
extern void test_core_filebuf__1(void);
extern void test_core_filebuf__2(void);
extern void test_core_filebuf__4(void);
extern void test_core_filebuf__5(void);
extern void test_core_filebuf__umask(void);
extern void test_refs_isvalidname__can_detect_invalid_formats(void);
extern void test_refs_isvalidname__wont_hopefully_choke_on_valid_formats(void);
extern void test_refs_create__symbolic(void);
extern void test_refs_create__deep_symbolic(void);
extern void test_refs_create__oid(void);
extern void test_refs_create__oid_unknown(void);
extern void test_refs_create__propagate_eexists(void);
extern void test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_create__creating_a_loose_ref_with_invalid_windows_name(void);
extern void test_refs_create__initialize(void);
extern void test_refs_create__cleanup(void);
extern void test_checkout_icase__overwrites_files_for_files(void);
extern void test_checkout_icase__overwrites_links_for_files(void);
extern void test_checkout_icase__overwites_folders_for_files(void);
extern void test_checkout_icase__overwrites_files_for_folders(void);
extern void test_checkout_icase__overwrites_links_for_folders(void);
extern void test_checkout_icase__initialize(void);
extern void test_checkout_icase__cleanup(void);
extern void test_merge_workdir_analysis__fastforward(void);
extern void test_merge_workdir_analysis__no_fastforward(void);
extern void test_merge_workdir_analysis__uptodate(void);
extern void test_merge_workdir_analysis__uptodate_merging_prev_commit(void);
extern void test_merge_workdir_analysis__unborn(void);
extern void test_merge_workdir_analysis__fastforward_with_config_noff(void);
extern void test_merge_workdir_analysis__no_fastforward_with_config_ffonly(void);
extern void test_merge_workdir_analysis__initialize(void);
extern void test_merge_workdir_analysis__cleanup(void);
extern void test_object_raw_fromstr__fail_on_invalid_oid_string(void);
extern void test_object_raw_fromstr__succeed_on_valid_oid_string(void);
extern void test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch(void);
extern void test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch(void);
extern void test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch(void);
extern void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__upstream_remote(void);
extern void test_refs_branches_upstream__upstream_remote_empty_value(void);
extern void test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__set_unset_upstream(void);
extern void test_refs_branches_upstream__initialize(void);
extern void test_refs_branches_upstream__cleanup(void);
extern void test_reset_hard__resetting_reverts_modified_files(void);
extern void test_reset_hard__cannot_reset_in_a_bare_repository(void);
extern void test_reset_hard__resetting_reverts_unmerged(void);
extern void test_reset_hard__cleans_up_merge(void);
extern void test_reset_hard__reflog_is_correct(void);
extern void test_reset_hard__initialize(void);
extern void test_reset_hard__cleanup(void);
extern void test_object_raw_convert__succeed_on_oid_to_string_conversion(void);
extern void test_object_raw_convert__succeed_on_oid_to_string_conversion_big(void);
extern void test_object_raw_convert__convert_oid_partially(void);
extern void test_diff_drivers__patterns(void);
extern void test_diff_drivers__long_lines(void);
extern void test_diff_drivers__builtins(void);
extern void test_diff_drivers__initialize(void);
extern void test_diff_drivers__cleanup(void);
extern void test_core_path__00_dirname(void);
extern void test_core_path__01_basename(void);
extern void test_core_path__02_topdir(void);
extern void test_core_path__05_joins(void);
extern void test_core_path__06_long_joins(void);
extern void test_core_path__07_path_to_dir(void);
extern void test_core_path__08_self_join(void);
extern void test_core_path__09_percent_decode(void);
extern void test_core_path__10_fromurl(void);
extern void test_core_path__11_walkup(void);
extern void test_core_path__11a_walkup_cancel(void);
extern void test_core_path__12_offset_to_path_root(void);
extern void test_core_path__13_cannot_prettify_a_non_existing_file(void);
extern void test_core_path__14_apply_relative(void);
extern void test_core_path__15_resolve_relative(void);
extern void test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one(void);
extern void test_repo_setters__setting_a_workdir_prettifies_its_path(void);
extern void test_repo_setters__setting_a_workdir_creates_a_gitlink(void);
extern void test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount(void);
extern void test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount(void);
extern void test_repo_setters__initialize(void);
extern void test_repo_setters__cleanup(void);
extern void test_refs_revparse__nonexistant_object(void);
extern void test_refs_revparse__invalid_reference_name(void);
extern void test_refs_revparse__shas(void);
extern void test_refs_revparse__head(void);
extern void test_refs_revparse__full_refs(void);
extern void test_refs_revparse__partial_refs(void);
extern void test_refs_revparse__describe_output(void);
extern void test_refs_revparse__nth_parent(void);
extern void test_refs_revparse__not_tag(void);
extern void test_refs_revparse__to_type(void);
extern void test_refs_revparse__linear_history(void);
extern void test_refs_revparse__chaining(void);
extern void test_refs_revparse__upstream(void);
extern void test_refs_revparse__ordinal(void);
extern void test_refs_revparse__previous_head(void);
extern void test_refs_revparse__reflog_of_a_ref_under_refs(void);
extern void test_refs_revparse__revwalk(void);
extern void test_refs_revparse__date(void);
extern void test_refs_revparse__colon(void);
extern void test_refs_revparse__disambiguation(void);
extern void test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS(void);
extern void test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS(void);
extern void test_refs_revparse__issue_994(void);
extern void test_refs_revparse__try_to_retrieve_branch_before_described_tag(void);
extern void test_refs_revparse__try_to_retrieve_sha_before_branch(void);
extern void test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha(void);
extern void test_refs_revparse__range(void);
extern void test_refs_revparse__parses_range_operator(void);
extern void test_refs_revparse__ext_retrieves_both_the_reference_and_its_target(void);
extern void test_refs_revparse__ext_can_expand_short_reference_names(void);
extern void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision(void);
extern void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content(void);
extern void test_refs_revparse__initialize(void);
extern void test_refs_revparse__cleanup(void);
extern void test_index_names__add(void);
extern void test_index_names__roundtrip(void);
extern void test_index_names__cleaned_on_reset_hard(void);
extern void test_index_names__cleaned_on_reset_mixed(void);
extern void test_index_names__cleaned_on_checkout_tree(void);
extern void test_index_names__cleaned_on_checkout_head(void);
extern void test_index_names__retained_on_checkout_index(void);
extern void test_index_names__initialize(void);
extern void test_index_names__cleanup(void);
extern void test_refs_races__create_matching(void);
extern void test_refs_races__symbolic_create_matching(void);
extern void test_refs_races__delete(void);
extern void test_refs_races__switch_oid_to_symbolic(void);
extern void test_refs_races__switch_symbolic_to_oid(void);
extern void test_refs_races__initialize(void);
extern void test_refs_races__cleanup(void);
extern void test_odb_foreach__foreach(void);
extern void test_odb_foreach__one_pack(void);
extern void test_odb_foreach__interrupt_foreach(void);
extern void test_odb_foreach__files_in_objects_dir(void);
extern void test_odb_foreach__cleanup(void);
extern void test_describe_t6120__default(void);
extern void test_describe_t6120__tags(void);
extern void test_describe_t6120__all(void);
extern void test_describe_t6120__longformat(void);
extern void test_describe_t6120__firstparent(void);
extern void test_describe_t6120__workdir(void);
extern void test_describe_t6120__pattern(void);
extern void test_describe_t6120__initialize(void);
extern void test_describe_t6120__cleanup(void);
extern void test_object_raw_size__validate_oid_size(void);
extern void test_notes_notesref__config_corenotesref(void);
extern void test_notes_notesref__initialize(void);
extern void test_notes_notesref__cleanup(void);
extern void test_config_new__write_new_config(void);
extern void test_describe_describe__can_describe_against_a_bare_repo(void);
extern void test_describe_describe__cannot_describe_against_a_repo_with_no_ref(void);
extern void test_diff_stats__stat(void);
extern void test_diff_stats__multiple_hunks(void);
extern void test_diff_stats__numstat(void);
extern void test_diff_stats__shortstat(void);
extern void test_diff_stats__rename(void);
extern void test_diff_stats__rename_nochanges(void);
extern void test_diff_stats__rename_and_modifiy(void);
extern void test_diff_stats__rename_no_find(void);
extern void test_diff_stats__rename_nochanges_no_find(void);
extern void test_diff_stats__rename_and_modifiy_no_find(void);
extern void test_diff_stats__binary(void);
extern void test_diff_stats__binary_numstat(void);
extern void test_diff_stats__mode_change(void);
extern void test_diff_stats__initialize(void);
extern void test_diff_stats__cleanup(void);
extern void test_buf_basic__resize(void);
extern void test_buf_basic__printf(void);
extern void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder(void);
extern void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts(void);
extern void test_object_tree_duplicateentries__initialize(void);
extern void test_object_tree_duplicateentries__cleanup(void);
extern void test_stress_diff__rename_big_files(void);
extern void test_stress_diff__rename_many_files(void);
extern void test_stress_diff__initialize(void);
extern void test_stress_diff__cleanup(void);
extern void test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD(void);
extern void test_refs_branches_ishead__can_properly_handle_unborn_HEAD(void);
extern void test_refs_branches_ishead__can_properly_handle_missing_HEAD(void);
extern void test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD(void);
extern void test_refs_branches_ishead__wont_be_fooled_by_a_non_branch(void);
extern void test_refs_branches_ishead__only_direct_references_are_considered(void);
extern void test_refs_branches_ishead__initialize(void);
extern void test_refs_branches_ishead__cleanup(void);
extern void test_online_fetchhead__wildcard_spec(void);
extern void test_online_fetchhead__explicit_spec(void);
extern void test_online_fetchhead__no_merges(void);
extern void test_online_fetchhead__initialize(void);
extern void test_online_fetchhead__cleanup(void);
extern void test_diff_notify__notify_single_pathspec(void);
extern void test_diff_notify__notify_multiple_pathspec(void);
extern void test_diff_notify__notify_catchall_with_empty_pathspecs(void);
extern void test_diff_notify__notify_catchall(void);
extern void test_diff_notify__notify_cb_can_abort_diff(void);
extern void test_diff_notify__notify_cb_can_be_used_as_filtering_function(void);
extern void test_diff_notify__initialize(void);
extern void test_diff_notify__cleanup(void);
extern void test_rebase_abort__merge(void);
extern void test_rebase_abort__detached_head(void);
extern void test_rebase_abort__old_style_head_file(void);
extern void test_rebase_abort__initialize(void);
extern void test_rebase_abort__cleanup(void);
extern void test_revwalk_hidecb__hide_all_cb(void);
extern void test_revwalk_hidecb__hide_none_cb(void);
extern void test_revwalk_hidecb__add_hide_cb_multiple_times(void);
extern void test_revwalk_hidecb__add_hide_cb_during_walking(void);
extern void test_revwalk_hidecb__hide_some_commits(void);
extern void test_revwalk_hidecb__test_payload(void);
extern void test_revwalk_hidecb__initialize(void);
extern void test_revwalk_hidecb__cleanup(void);
extern void test_core_hex__fromhex(void);
extern void test_core_string__0(void);
extern void test_core_string__1(void);
extern void test_core_string__2(void);
extern void test_pack_indexer__out_of_order(void);
extern void test_pack_indexer__fix_thin(void);
extern void test_object_raw_compare__succeed_on_copy_oid(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_lesser(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_equal(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_greater(void);
extern void test_object_raw_compare__compare_fmt_oids(void);
extern void test_object_raw_compare__compare_static_oids(void);
extern void test_object_raw_compare__compare_pathfmt_oids(void);
extern void test_object_commit_commitstagedfile__generate_predictable_object_ids(void);
extern void test_object_commit_commitstagedfile__amend_commit(void);
extern void test_object_commit_commitstagedfile__initialize(void);
extern void test_object_commit_commitstagedfile__cleanup(void);
extern void test_diff_blob__can_compare_text_blobs(void);
extern void test_diff_blob__can_compare_text_blobs_with_patch(void);
extern void test_diff_blob__can_compare_against_null_blobs(void);
extern void test_diff_blob__can_compare_against_null_blobs_with_patch(void);
extern void test_diff_blob__can_compare_identical_blobs(void);
extern void test_diff_blob__can_compare_identical_blobs_with_patch(void);
extern void test_diff_blob__can_compare_two_binary_blobs(void);
extern void test_diff_blob__can_compare_a_binary_blob_and_a_text_blob(void);
extern void test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext(void);
extern void test_diff_blob__checks_options_version_too_low(void);
extern void test_diff_blob__checks_options_version_too_high(void);
extern void test_diff_blob__can_correctly_detect_a_binary_blob_as_binary(void);
extern void test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary(void);
extern void test_diff_blob__can_compare_blob_to_buffer(void);
extern void test_diff_blob__can_compare_blob_to_buffer_with_patch(void);
extern void test_diff_blob__binary_data_comparisons(void);
extern void test_diff_blob__using_path_and_attributes(void);
extern void test_diff_blob__can_compare_buffer_to_buffer(void);
extern void test_diff_blob__initialize(void);
extern void test_diff_blob__cleanup(void);
extern void test_date_date__overflow(void);
extern void test_odb_backend_nobackend__write_fails_gracefully(void);
extern void test_odb_backend_nobackend__initialize(void);
extern void test_odb_backend_nobackend__cleanup(void);
extern void test_core_opts__readwrite(void);
extern void test_repo_state__none_with_HEAD_attached(void);
extern void test_repo_state__none_with_HEAD_detached(void);
extern void test_repo_state__merge(void);
extern void test_repo_state__revert(void);
extern void test_repo_state__cherry_pick(void);
extern void test_repo_state__bisect(void);
extern void test_repo_state__rebase_interactive(void);
extern void test_repo_state__rebase_merge(void);
extern void test_repo_state__rebase(void);
extern void test_repo_state__apply_mailbox(void);
extern void test_repo_state__apply_mailbox_or_rebase(void);
extern void test_repo_state__initialize(void);
extern void test_repo_state__cleanup(void);
extern void test_config_backend__checks_version(void);
extern void test_index_cache__write_extension_at_root(void);
extern void test_index_cache__write_extension_invalidated_root(void);
extern void test_index_cache__read_tree_no_children(void);
extern void test_index_cache__two_levels(void);
extern void test_index_cache__read_tree_children(void);
extern void test_index_cache__initialize(void);
extern void test_index_cache__cleanup(void);
extern void test_network_fetchlocal__complete(void);
extern void test_network_fetchlocal__prune(void);
extern void test_network_fetchlocal__prune_overlapping(void);
extern void test_network_fetchlocal__fetchprune(void);
extern void test_network_fetchlocal__prune_tag(void);
extern void test_network_fetchlocal__partial(void);
extern void test_network_fetchlocal__clone_into_mirror(void);
extern void test_network_fetchlocal__multi_remotes(void);
extern void test_network_fetchlocal__call_progress(void);
extern void test_network_fetchlocal__prune_load_remote_prune_config(void);
extern void test_network_fetchlocal__prune_load_fetch_prune_config(void);
extern void test_network_fetchlocal__cleanup(void);
extern void test_path_win32__utf8_to_utf16(void);
extern void test_path_win32__removes_trailing_slash(void);
extern void test_path_win32__squashes_multiple_slashes(void);
extern void test_path_win32__unc(void);
extern void test_path_win32__honors_max_path(void);
extern void test_path_win32__dot_and_dotdot(void);
extern void test_path_win32__absolute_from_no_drive_letter(void);
extern void test_path_win32__absolute_from_relative(void);
extern void test_path_win32__canonicalize(void);
extern void test_path_win32__8dot3_name(void);
extern void test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH(void);
extern void test_checkout_head__with_index_only_tree(void);
extern void test_checkout_head__initialize(void);
extern void test_checkout_head__cleanup(void);
extern void test_odb_mixed__dup_oid(void);
extern void test_odb_mixed__dup_oid_prefix_0(void);
extern void test_odb_mixed__initialize(void);
extern void test_odb_mixed__cleanup(void);
extern void test_object_message__long_lines_without_spaces_should_be_unchanged(void);
extern void test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged(void);
extern void test_object_message__lines_with_intermediate_spaces_should_be_unchanged(void);
extern void test_object_message__consecutive_blank_lines_should_be_unified(void);
extern void test_object_message__only_consecutive_blank_lines_should_be_completely_removed(void);
extern void test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed(void);
extern void test_object_message__consecutive_blank_lines_at_the_end_should_be_removed(void);
extern void test_object_message__text_without_newline_at_end_should_end_with_newline(void);
extern void test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline(void);
extern void test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain(void);
extern void test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string(void);
extern void test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string(void);
extern void test_object_message__consecutive_text_lines_should_be_unchanged(void);
extern void test_object_message__strip_comments(void);
extern void test_object_message__keep_comments(void);
extern void test_object_message__message_prettify(void);
extern void test_filter_custom__to_odb(void);
extern void test_filter_custom__to_workdir(void);
extern void test_filter_custom__can_register_a_custom_filter_in_the_repository(void);
extern void test_filter_custom__order_dependency(void);
extern void test_filter_custom__filter_registry_failure_cases(void);
extern void test_filter_custom__initialize(void);
extern void test_filter_custom__cleanup(void);
extern void test_index_addall__repo_lifecycle(void);
extern void test_index_addall__callback_filtering(void);
extern void test_index_addall__initialize(void);
extern void test_index_addall__cleanup(void);
extern void test_refs_shorthand__0(void);
extern void test_index_read_tree__read_write_involution(void);
extern void test_cherrypick_workdir__automerge(void);
extern void test_cherrypick_workdir__empty_result(void);
extern void test_cherrypick_workdir__conflicts(void);
extern void test_cherrypick_workdir__conflict_use_ours(void);
extern void test_cherrypick_workdir__rename(void);
extern void test_cherrypick_workdir__both_renamed(void);
extern void test_cherrypick_workdir__nonmerge_fails_mainline_specified(void);
extern void test_cherrypick_workdir__merge_fails_without_mainline_specified(void);
extern void test_cherrypick_workdir__merge_first_parent(void);
extern void test_cherrypick_workdir__merge_second_parent(void);
extern void test_cherrypick_workdir__initialize(void);
extern void test_cherrypick_workdir__cleanup(void);
extern void test_object_blob_fromchunks__can_create_a_blob_from_a_in_memory_chunk_provider(void);
extern void test_object_blob_fromchunks__doesnot_overwrite_an_already_existing_object(void);
extern void test_object_blob_fromchunks__creating_a_blob_from_chunks_honors_the_attributes_directives(void);
extern void test_object_blob_fromchunks__can_stop_with_error(void);
extern void test_object_blob_fromchunks__initialize(void);
extern void test_object_blob_fromchunks__cleanup(void);
extern void test_repo_config__can_open_global_when_there_is_no_file(void);
extern void test_repo_config__can_open_missing_global_with_separators(void);
extern void test_repo_config__read_with_no_configs_at_all(void);
extern void test_repo_config__initialize(void);
extern void test_repo_config__cleanup(void);
extern void test_odb_packed_one__mass_read(void);
extern void test_odb_packed_one__read_header_0(void);
extern void test_odb_packed_one__initialize(void);
extern void test_odb_packed_one__cleanup(void);
extern void test_core_oid__streq(void);
extern void test_core_oid__strcmp(void);
extern void test_core_oid__ncmp(void);
extern void test_core_oid__initialize(void);
extern void test_attr_ignore__honor_temporary_rules(void);
extern void test_attr_ignore__allow_root(void);
extern void test_attr_ignore__ignore_root(void);
extern void test_attr_ignore__full_paths(void);
extern void test_attr_ignore__more_starstar_cases(void);
extern void test_attr_ignore__leading_stars(void);
extern void test_attr_ignore__skip_gitignore_directory(void);
extern void test_attr_ignore__subdirectory_gitignore(void);
extern void test_attr_ignore__expand_tilde_to_homedir(void);
extern void test_attr_ignore__gitignore_in_subdir(void);
extern void test_attr_ignore__dont_ignore_files_for_folder(void);
extern void test_attr_ignore__initialize(void);
extern void test_attr_ignore__cleanup(void);
extern void test_refs_listall__from_repository_opened_through_workdir_path(void);
extern void test_refs_listall__from_repository_opened_through_gitdir_path(void);
extern void test_refs_listall__from_repository_with_no_trailing_newline(void);
extern void test_config_snapshot__create_snapshot(void);
extern void test_config_snapshot__multivar(void);
extern void test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository(void);
extern void test_status_worktree_init__first_commit_in_progress(void);
extern void test_status_worktree_init__status_file_without_index_or_workdir(void);
extern void test_status_worktree_init__status_file_with_clean_index_and_empty_workdir(void);
extern void test_status_worktree_init__bracket_in_filename(void);
extern void test_status_worktree_init__space_in_filename(void);
extern void test_status_worktree_init__disable_pathspec_match(void);
extern void test_status_worktree_init__new_staged_file_must_handle_crlf(void);
extern void test_core_zstream__basic(void);
extern void test_core_zstream__buffer(void);
extern void test_core_zstream__big_data(void);
extern void test_stash_save__does_not_keep_index_by_default(void);
extern void test_stash_save__can_keep_index(void);
extern void test_stash_save__can_include_untracked_files(void);
extern void test_stash_save__untracked_skips_ignored(void);
extern void test_stash_save__can_include_untracked_and_ignored_files(void);
extern void test_stash_save__can_accept_a_message(void);
extern void test_stash_save__cannot_stash_against_an_unborn_branch(void);
extern void test_stash_save__cannot_stash_against_a_bare_repository(void);
extern void test_stash_save__can_stash_against_a_detached_head(void);
extern void test_stash_save__stashing_updates_the_reflog(void);
extern void test_stash_save__cannot_stash_when_there_are_no_local_change(void);
extern void test_stash_save__can_stage_normal_then_stage_untracked(void);
extern void test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree(void);
extern void test_stash_save__ignored_directory(void);
extern void test_stash_save__skip_submodules(void);
extern void test_stash_save__initialize(void);
extern void test_stash_save__cleanup(void);
extern void test_date_rfc2822__format_rfc2822_no_offset(void);
extern void test_date_rfc2822__format_rfc2822_positive_offset(void);
extern void test_date_rfc2822__format_rfc2822_negative_offset(void);
extern void test_date_rfc2822__format_rfc2822_buffer_too_small(void);
extern void test_repo_discover__0(void);
extern void test_refs_foreachglob__retrieve_all_refs(void);
extern void test_refs_foreachglob__retrieve_remote_branches(void);
extern void test_refs_foreachglob__retrieve_local_branches(void);
extern void test_refs_foreachglob__retrieve_partially_named_references(void);
extern void test_refs_foreachglob__can_cancel(void);
extern void test_refs_foreachglob__initialize(void);
extern void test_refs_foreachglob__cleanup(void);
extern void test_core_buffer__0(void);
extern void test_core_buffer__1(void);
extern void test_core_buffer__2(void);
extern void test_core_buffer__3(void);
extern void test_core_buffer__4(void);
extern void test_core_buffer__5(void);
extern void test_core_buffer__6(void);
extern void test_core_buffer__7(void);
extern void test_core_buffer__8(void);
extern void test_core_buffer__9(void);
extern void test_core_buffer__10(void);
extern void test_core_buffer__join3(void);
extern void test_core_buffer__11(void);
extern void test_core_buffer__rfind_variants(void);
extern void test_core_buffer__puts_escaped(void);
extern void test_core_buffer__unescape(void);
extern void test_core_buffer__encode_base64(void);
extern void test_core_buffer__decode_base64(void);
extern void test_core_buffer__encode_base85(void);
extern void test_core_buffer__classify_with_utf8(void);
extern void test_core_buffer__similarity_metric(void);
extern void test_core_buffer__similarity_metric_whitespace(void);
extern void test_core_buffer__lf_and_crlf_conversions(void);
extern void test_buf_oom__grow(void);
extern void test_refs_setter__update_direct(void);
extern void test_refs_setter__update_symbolic(void);
extern void test_refs_setter__cant_update_direct_with_symbolic(void);
extern void test_refs_setter__cant_update_symbolic_with_direct(void);
extern void test_refs_setter__initialize(void);
extern void test_refs_setter__cleanup(void);
extern void test_config_rename__can_rename(void);
extern void test_config_rename__prevent_overwrite(void);
extern void test_config_rename__require_a_valid_new_name(void);
extern void test_config_rename__initialize(void);
extern void test_config_rename__cleanup(void);
extern void test_config_stress__dont_break_on_invalid_input(void);
extern void test_config_stress__comments(void);
extern void test_config_stress__escape_subsection_names(void);
extern void test_config_stress__trailing_backslash(void);
extern void test_config_stress__complex(void);
extern void test_config_stress__initialize(void);
extern void test_config_stress__cleanup(void);
extern void test_config_write__replace_value(void);
extern void test_config_write__delete_value(void);
extern void test_config_write__delete_value_at_specific_level(void);
extern void test_config_write__write_subsection(void);
extern void test_config_write__delete_inexistent(void);
extern void test_config_write__value_containing_quotes(void);
extern void test_config_write__escape_value(void);
extern void test_config_write__add_value_at_specific_level(void);
extern void test_config_write__add_value_at_file_with_no_clrf_at_the_end(void);
extern void test_config_write__add_section_at_file_with_no_clrf_at_the_end(void);
extern void test_config_write__add_value_which_needs_quotes(void);
extern void test_config_write__can_set_a_value_to_NULL(void);
extern void test_config_write__can_set_an_empty_value(void);
extern void test_config_write__updating_a_locked_config_file_returns_ELOCKED(void);
extern void test_config_write__outside_change(void);
extern void test_config_write__initialize(void);
extern void test_config_write__cleanup(void);
extern void test_core_init__returns_count(void);
extern void test_network_remote_defaultbranch__master(void);
extern void test_network_remote_defaultbranch__master_does_not_win(void);
extern void test_network_remote_defaultbranch__master_on_detached(void);
extern void test_network_remote_defaultbranch__no_default_branch(void);
extern void test_network_remote_defaultbranch__detached_sharing_nonbranch_id(void);
extern void test_network_remote_defaultbranch__unborn_HEAD_with_branches(void);
extern void test_network_remote_defaultbranch__initialize(void);
extern void test_network_remote_defaultbranch__cleanup(void);
extern void test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion(void);
extern void test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed(void);
extern void test_object_tree_attributes__treebuilder_reject_invalid_filemode(void);
extern void test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one(void);
extern void test_object_tree_attributes__normalize_600(void);
extern void test_object_tree_attributes__initialize(void);
extern void test_object_tree_attributes__cleanup(void);
extern void test_checkout_crlf__detect_crlf_autocrlf_false(void);
extern void test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size(void);
extern void test_checkout_crlf__detect_crlf_autocrlf_true(void);
extern void test_checkout_crlf__more_lf_autocrlf_true(void);
extern void test_checkout_crlf__more_crlf_autocrlf_true(void);
extern void test_checkout_crlf__all_crlf_autocrlf_true(void);
extern void test_checkout_crlf__autocrlf_true_index_size_is_filtered_size(void);
extern void test_checkout_crlf__with_ident(void);
extern void test_checkout_crlf__autocrlf_false_no_attrs(void);
extern void test_checkout_crlf__autocrlf_true_no_attrs(void);
extern void test_checkout_crlf__autocrlf_input_no_attrs(void);
extern void test_checkout_crlf__autocrlf_false_text_auto_attr(void);
extern void test_checkout_crlf__autocrlf_true_text_auto_attr(void);
extern void test_checkout_crlf__autocrlf_input_text_auto_attr(void);
extern void test_checkout_crlf__initialize(void);
extern void test_checkout_crlf__cleanup(void);
extern void test_core_errors__public_api(void);
extern void test_core_errors__new_school(void);
extern void test_core_errors__restore(void);
extern void test_config_multivar__foreach(void);
extern void test_config_multivar__get(void);
extern void test_config_multivar__add(void);
extern void test_config_multivar__add_new(void);
extern void test_config_multivar__replace(void);
extern void test_config_multivar__replace_multiple(void);
extern void test_config_multivar__delete(void);
extern void test_config_multivar__delete_multiple(void);
extern void test_config_multivar__delete_notfound(void);
extern void test_config_multivar__initialize(void);
extern void test_config_multivar__cleanup(void);
extern void test_network_urlparse__trivial(void);
extern void test_network_urlparse__root(void);
extern void test_network_urlparse__just_hostname(void);
extern void test_network_urlparse__encoded_password(void);
extern void test_network_urlparse__user(void);
extern void test_network_urlparse__user_pass(void);
extern void test_network_urlparse__port(void);
extern void test_network_urlparse__user_port(void);
extern void test_network_urlparse__user_pass_port(void);
extern void test_network_urlparse__connection_data_http(void);
extern void test_network_urlparse__connection_data_ssl(void);
extern void test_network_urlparse__encoded_username_password(void);
extern void test_network_urlparse__connection_data_cross_host_redirect(void);
extern void test_network_urlparse__connection_data_http_downgrade(void);
extern void test_network_urlparse__connection_data_relative_redirect(void);
extern void test_network_urlparse__connection_data_relative_redirect_ssl(void);
extern void test_network_urlparse__connection_data_cleanup(void);
extern void test_network_urlparse__initialize(void);
extern void test_network_urlparse__cleanup(void);
extern void test_refs_overwrite__symbolic(void);
extern void test_refs_overwrite__object_id(void);
extern void test_refs_overwrite__object_id_with_symbolic(void);
extern void test_refs_overwrite__symbolic_with_object_id(void);
extern void test_refs_overwrite__initialize(void);
extern void test_refs_overwrite__cleanup(void);
extern void test_network_remote_remotes__parsing(void);
extern void test_network_remote_remotes__pushurl(void);
extern void test_network_remote_remotes__error_when_not_found(void);
extern void test_network_remote_remotes__error_when_no_push_available(void);
extern void test_network_remote_remotes__refspec_parsing(void);
extern void test_network_remote_remotes__add_fetchspec(void);
extern void test_network_remote_remotes__dup(void);
extern void test_network_remote_remotes__add_pushspec(void);
extern void test_network_remote_remotes__save(void);
extern void test_network_remote_remotes__fnmatch(void);
extern void test_network_remote_remotes__transform(void);
extern void test_network_remote_remotes__transform_destination_to_source(void);
extern void test_network_remote_remotes__missing_refspecs(void);
extern void test_network_remote_remotes__nonmatch_upstream_refspec(void);
extern void test_network_remote_remotes__list(void);
extern void test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND(void);
extern void test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_network_remote_remotes__add(void);
extern void test_network_remote_remotes__cannot_add_a_nameless_remote(void);
extern void test_network_remote_remotes__cannot_save_an_inmemory_remote(void);
extern void test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name(void);
extern void test_network_remote_remotes__tagopt(void);
extern void test_network_remote_remotes__can_load_with_an_empty_url(void);
extern void test_network_remote_remotes__can_load_with_only_an_empty_pushurl(void);
extern void test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl(void);
extern void test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote(void);
extern void test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid(void);
extern void test_network_remote_remotes__query_refspecs(void);
extern void test_network_remote_remotes__fetch_from_anonymous(void);
extern void test_network_remote_remotes__single_branch(void);
extern void test_network_remote_remotes__restricted_refspecs(void);
extern void test_network_remote_remotes__initialize(void);
extern void test_network_remote_remotes__cleanup(void);
extern void test_network_remote_delete__remove_remote_tracking_branches(void);
extern void test_network_remote_delete__remove_remote_configuration_settings(void);
extern void test_network_remote_delete__remove_branch_upstream_configuration_settings(void);
extern void test_network_remote_delete__initialize(void);
extern void test_network_remote_delete__cleanup(void);
extern void test_attr_repo__get_one(void);
extern void test_attr_repo__get_one_start_deep(void);
extern void test_attr_repo__get_many(void);
extern void test_attr_repo__get_many_in_place(void);
extern void test_attr_repo__foreach(void);
extern void test_attr_repo__manpage_example(void);
extern void test_attr_repo__macros(void);
extern void test_attr_repo__bad_macros(void);
extern void test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives(void);
extern void test_attr_repo__bare_repo_with_index(void);
extern void test_attr_repo__initialize(void);
extern void test_attr_repo__cleanup(void);
extern void test_merge_trees_commits__automerge(void);
extern void test_merge_trees_commits__no_ancestor(void);
extern void test_merge_trees_commits__df_conflict(void);
extern void test_merge_trees_commits__initialize(void);
extern void test_merge_trees_commits__cleanup(void);
extern void test_pack_packbuilder__create_pack(void);
extern void test_pack_packbuilder__get_hash(void);
extern void test_pack_packbuilder__permissions_standard(void);
extern void test_pack_packbuilder__permissions_readonly(void);
extern void test_pack_packbuilder__permissions_readwrite(void);
extern void test_pack_packbuilder__foreach(void);
extern void test_pack_packbuilder__foreach_with_cancel(void);
extern void test_pack_packbuilder__initialize(void);
extern void test_pack_packbuilder__cleanup(void);
extern void test_submodule_modify__init(void);
extern void test_submodule_modify__sync(void);
extern void test_submodule_modify__edit_and_save(void);
extern void test_submodule_modify__initialize(void);
extern void test_network_cred__stock_userpass_validates_args(void);
extern void test_network_cred__stock_userpass_validates_that_method_is_allowed(void);
extern void test_network_cred__stock_userpass_properly_handles_username_in_url(void);
extern void test_refs_branches_move__can_move_a_local_branch(void);
extern void test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace(void);
extern void test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace(void);
extern void test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one(void);
extern void test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_branches_move__can_not_move_a_non_branch(void);
extern void test_refs_branches_move__can_force_move_over_an_existing_branch(void);
extern void test_refs_branches_move__moving_a_branch_moves_related_configuration_data(void);
extern void test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD(void);
extern void test_refs_branches_move__updates_the_reflog(void);
extern void test_refs_branches_move__default_reflog_message(void);
extern void test_refs_branches_move__can_move_with_unicode(void);
extern void test_refs_branches_move__initialize(void);
extern void test_refs_branches_move__cleanup(void);
extern void test_core_pool__0(void);
extern void test_core_pool__1(void);
extern void test_core_pool__2(void);
extern void test_core_pool__free_list(void);
extern void test_core_pool__strndup_limit(void);
extern void test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace(void);
extern void test_notes_notes__can_cancel_foreach(void);
extern void test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND(void);
extern void test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace(void);
extern void test_notes_notes__can_insert_a_note_with_a_custom_namespace(void);
extern void test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS(void);
extern void test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note(void);
extern void test_notes_notes__can_insert_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__can_read_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__can_remove_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND(void);
extern void test_notes_notes__can_iterate_default_namespace(void);
extern void test_notes_notes__can_iterate_custom_namespace(void);
extern void test_notes_notes__empty_iterate(void);
extern void test_notes_notes__initialize(void);
extern void test_notes_notes__cleanup(void);
extern void test_object_tree_frompath__retrieve_tree_from_path_to_treeentry(void);
extern void test_object_tree_frompath__fail_when_processing_an_invalid_path(void);
extern void test_object_tree_frompath__initialize(void);
extern void test_object_tree_frompath__cleanup(void);
extern void test_online_fetch__default_git(void);
extern void test_online_fetch__default_http(void);
extern void test_online_fetch__default_https(void);
extern void test_online_fetch__no_tags_git(void);
extern void test_online_fetch__no_tags_http(void);
extern void test_online_fetch__fetch_twice(void);
extern void test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date(void);
extern void test_online_fetch__can_cancel(void);
extern void test_online_fetch__ls_disconnected(void);
extern void test_online_fetch__remote_symrefs(void);
extern void test_online_fetch__twice(void);
extern void test_online_fetch__initialize(void);
extern void test_online_fetch__cleanup(void);
extern void test_config_global__open_global(void);
extern void test_config_global__open_xdg(void);
extern void test_config_global__initialize(void);
extern void test_config_global__cleanup(void);
extern void test_buf_splice__preprend(void);
extern void test_buf_splice__append(void);
extern void test_buf_splice__insert_at(void);
extern void test_buf_splice__remove_at(void);
extern void test_buf_splice__replace(void);
extern void test_buf_splice__replace_with_longer(void);
extern void test_buf_splice__replace_with_shorter(void);
extern void test_buf_splice__truncate(void);
extern void test_buf_splice__dont_do_anything(void);
extern void test_buf_splice__initialize(void);
extern void test_buf_splice__cleanup(void);
extern void test_repo_hashfile__simple(void);
extern void test_repo_hashfile__filtered(void);
extern void test_repo_hashfile__initialize(void);
extern void test_repo_hashfile__cleanup(void);
extern void test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head(void);
extern void test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head(void);
extern void test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH(void);
extern void test_repo_headtree__when_head_is_missing_returns_ENOTFOUND(void);
extern void test_repo_headtree__initialize(void);
extern void test_repo_headtree__cleanup(void);
extern void test_attr_lookup__simple(void);
extern void test_attr_lookup__match_variants(void);
extern void test_attr_lookup__assign_variants(void);
extern void test_attr_lookup__check_attr_examples(void);
extern void test_attr_lookup__from_buffer(void);
extern void test_config_add__to_existing_section(void);
extern void test_config_add__to_new_section(void);
extern void test_config_add__initialize(void);
extern void test_config_add__cleanup(void);
static const struct clar_func _clar_cb_refs_normalize[] = {
    { "can_normalize_a_direct_reference_name", &test_refs_normalize__can_normalize_a_direct_reference_name },
    { "cannot_normalize_any_direct_reference_name", &test_refs_normalize__cannot_normalize_any_direct_reference_name },
    { "symbolic", &test_refs_normalize__symbolic },
    { "jgit_suite", &test_refs_normalize__jgit_suite },
    { "buffer_has_to_be_big_enough_to_hold_the_normalized_version", &test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version },
    { "refspec_pattern", &test_refs_normalize__refspec_pattern }
};
static const struct clar_func _clar_cb_object_tree_walk[] = {
    { "0", &test_object_tree_walk__0 },
    { "1", &test_object_tree_walk__1 },
    { "2", &test_object_tree_walk__2 }
};
static const struct clar_func _clar_cb_odb_backend_nonrefreshing[] = {
    { "exists_is_invoked_once_on_failure", &test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure },
    { "read_is_invoked_once_on_failure", &test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure },
    { "readprefix_is_invoked_once_on_failure", &test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure },
    { "readheader_is_invoked_once_on_failure", &test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure },
    { "exists_is_invoked_once_on_success", &test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success },
    { "read_is_invoked_once_on_success", &test_odb_backend_nonrefreshing__read_is_invoked_once_on_success },
    { "readprefix_is_invoked_once_on_success", &test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success },
    { "readheader_is_invoked_once_on_success", &test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success },
    { "read_is_invoked_once_when_revparsing_a_full_oid", &test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid }
};
static const struct clar_func _clar_cb_merge_trees_modeconflict[] = {
    { "df_conflict", &test_merge_trees_modeconflict__df_conflict }
};
static const struct clar_func _clar_cb_repo_open[] = {
    { "bare_empty_repo", &test_repo_open__bare_empty_repo },
    { "standard_empty_repo_through_gitdir", &test_repo_open__standard_empty_repo_through_gitdir },
    { "standard_empty_repo_through_workdir", &test_repo_open__standard_empty_repo_through_workdir },
    { "open_with_discover", &test_repo_open__open_with_discover },
    { "gitlinked", &test_repo_open__gitlinked },
    { "from_git_new_workdir", &test_repo_open__from_git_new_workdir },
    { "failures", &test_repo_open__failures },
    { "bad_gitlinks", &test_repo_open__bad_gitlinks },
    { "win32_path", &test_repo_open__win32_path },
    { "opening_a_non_existing_repository_returns_ENOTFOUND", &test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND },
    { "no_config", &test_repo_open__no_config },
    { "force_bare", &test_repo_open__force_bare }
};
static const struct clar_func _clar_cb_object_raw_chars[] = {
    { "find_invalid_chars_in_oid", &test_object_raw_chars__find_invalid_chars_in_oid },
    { "build_valid_oid_from_raw_bytes", &test_object_raw_chars__build_valid_oid_from_raw_bytes }
};
static const struct clar_func _clar_cb_revwalk_mergebase[] = {
    { "single1", &test_revwalk_mergebase__single1 },
    { "single2", &test_revwalk_mergebase__single2 },
    { "merged_branch", &test_revwalk_mergebase__merged_branch },
    { "two_way_merge", &test_revwalk_mergebase__two_way_merge },
    { "no_common_ancestor_returns_ENOTFOUND", &test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND },
    { "prefer_youngest_merge_base", &test_revwalk_mergebase__prefer_youngest_merge_base },
    { "multiple_merge_bases", &test_revwalk_mergebase__multiple_merge_bases },
    { "multiple_merge_bases_many_commits", &test_revwalk_mergebase__multiple_merge_bases_many_commits },
    { "no_off_by_one_missing", &test_revwalk_mergebase__no_off_by_one_missing },
    { "many_no_common_ancestor_returns_ENOTFOUND", &test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND },
    { "many_merge_branch", &test_revwalk_mergebase__many_merge_branch },
    { "octopus_no_common_ancestor_returns_ENOTFOUND", &test_revwalk_mergebase__octopus_no_common_ancestor_returns_ENOTFOUND },
    { "octopus_merge_branch", &test_revwalk_mergebase__octopus_merge_branch }
};
static const struct clar_func _clar_cb_merge_workdir_setup[] = {
    { "one_branch", &test_merge_workdir_setup__one_branch },
    { "one_oid", &test_merge_workdir_setup__one_oid },
    { "two_branches", &test_merge_workdir_setup__two_branches },
    { "three_branches", &test_merge_workdir_setup__three_branches },
    { "three_oids", &test_merge_workdir_setup__three_oids },
    { "branches_and_oids_1", &test_merge_workdir_setup__branches_and_oids_1 },
    { "branches_and_oids_2", &test_merge_workdir_setup__branches_and_oids_2 },
    { "branches_and_oids_3", &test_merge_workdir_setup__branches_and_oids_3 },
    { "branches_and_oids_4", &test_merge_workdir_setup__branches_and_oids_4 },
    { "three_same_branches", &test_merge_workdir_setup__three_same_branches },
    { "three_same_oids", &test_merge_workdir_setup__three_same_oids },
    { "remote_tracking_one_branch", &test_merge_workdir_setup__remote_tracking_one_branch },
    { "remote_tracking_two_branches", &test_merge_workdir_setup__remote_tracking_two_branches },
    { "remote_tracking_three_branches", &test_merge_workdir_setup__remote_tracking_three_branches },
    { "normal_branch_and_remote_tracking_branch", &test_merge_workdir_setup__normal_branch_and_remote_tracking_branch },
    { "remote_tracking_branch_and_normal_branch", &test_merge_workdir_setup__remote_tracking_branch_and_normal_branch },
    { "two_remote_tracking_branch_and_two_normal_branches", &test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches },
    { "pull_one", &test_merge_workdir_setup__pull_one },
    { "pull_two", &test_merge_workdir_setup__pull_two },
    { "pull_three", &test_merge_workdir_setup__pull_three },
    { "three_remotes", &test_merge_workdir_setup__three_remotes },
    { "two_remotes", &test_merge_workdir_setup__two_remotes },
    { "id_from_head", &test_merge_workdir_setup__id_from_head },
    { "head_notfound", &test_merge_workdir_setup__head_notfound },
    { "head_invalid_oid", &test_merge_workdir_setup__head_invalid_oid },
    { "head_foreach_nonewline", &test_merge_workdir_setup__head_foreach_nonewline },
    { "head_foreach_one", &test_merge_workdir_setup__head_foreach_one },
    { "head_foreach_octopus", &test_merge_workdir_setup__head_foreach_octopus },
    { "retained_after_success", &test_merge_workdir_setup__retained_after_success },
    { "removed_after_failure", &test_merge_workdir_setup__removed_after_failure }
};
static const struct clar_func _clar_cb_object_shortid[] = {
    { "select", &test_object_shortid__select }
};
static const struct clar_func _clar_cb_core_strmap[] = {
    { "0", &test_core_strmap__0 },
    { "1", &test_core_strmap__1 },
    { "2", &test_core_strmap__2 },
    { "3", &test_core_strmap__3 }
};
static const struct clar_func _clar_cb_core_oidmap[] = {
    { "basic", &test_core_oidmap__basic },
    { "hash_collision", &test_core_oidmap__hash_collision }
};
static const struct clar_func _clar_cb_checkout_nasty[] = {
    { "dotgit_tree", &test_checkout_nasty__dotgit_tree },
    { "dotcapitalgit_tree", &test_checkout_nasty__dotcapitalgit_tree },
    { "dot_tree", &test_checkout_nasty__dot_tree },
    { "dot_dotgit_tree", &test_checkout_nasty__dot_dotgit_tree },
    { "dotdot_dotgit_tree", &test_checkout_nasty__dotdot_dotgit_tree },
    { "dotdot_tree", &test_checkout_nasty__dotdot_tree },
    { "dotgit_path", &test_checkout_nasty__dotgit_path },
    { "dotcapitalgit_path", &test_checkout_nasty__dotcapitalgit_path },
    { "dot_dotgit_path", &test_checkout_nasty__dot_dotgit_path },
    { "dot_dotcapitalgit_path", &test_checkout_nasty__dot_dotcapitalgit_path },
    { "dotdot_dotgit_path", &test_checkout_nasty__dotdot_dotgit_path },
    { "dotdot_dotcapitalgit_path", &test_checkout_nasty__dotdot_dotcapitalgit_path },
    { "dot_path", &test_checkout_nasty__dot_path },
    { "dot_path_two", &test_checkout_nasty__dot_path_two },
    { "dotdot_path", &test_checkout_nasty__dotdot_path },
    { "dotgit_backslash_path", &test_checkout_nasty__dotgit_backslash_path },
    { "dotcapitalgit_backslash_path", &test_checkout_nasty__dotcapitalgit_backslash_path },
    { "dot_backslash_dotcapitalgit_path", &test_checkout_nasty__dot_backslash_dotcapitalgit_path },
    { "dot_git_dot", &test_checkout_nasty__dot_git_dot },
    { "git_tilde1", &test_checkout_nasty__git_tilde1 },
    { "git_custom_shortname", &test_checkout_nasty__git_custom_shortname },
    { "only_looks_like_a_git_shortname", &test_checkout_nasty__only_looks_like_a_git_shortname },
    { "dot_git_colon", &test_checkout_nasty__dot_git_colon },
    { "dot_git_colon_stuff", &test_checkout_nasty__dot_git_colon_stuff },
    { "dot_git_hfs_ignorable", &test_checkout_nasty__dot_git_hfs_ignorable },
    { "honors_core_protecthfs", &test_checkout_nasty__honors_core_protecthfs },
    { "honors_core_protectntfs", &test_checkout_nasty__honors_core_protectntfs },
    { "symlink1", &test_checkout_nasty__symlink1 },
    { "symlink2", &test_checkout_nasty__symlink2 },
    { "symlink3", &test_checkout_nasty__symlink3 }
};
static const struct clar_func _clar_cb_diff_format_email[] = {
    { "simple", &test_diff_format_email__simple },
    { "multiple", &test_diff_format_email__multiple },
    { "exclude_marker", &test_diff_format_email__exclude_marker },
    { "invalid_no", &test_diff_format_email__invalid_no },
    { "mode_change", &test_diff_format_email__mode_change },
    { "rename_add_remove", &test_diff_format_email__rename_add_remove },
    { "multiline_summary", &test_diff_format_email__multiline_summary },
    { "binary", &test_diff_format_email__binary }
};
static const struct clar_func _clar_cb_revwalk_simplify[] = {
    { "first_parent", &test_revwalk_simplify__first_parent }
};
static const struct clar_func _clar_cb_structinit_structinit[] = {
    { "compare", &test_structinit_structinit__compare }
};
static const struct clar_func _clar_cb_commit_signature[] = {
    { "leading_and_trailing_spaces_are_trimmed", &test_commit_signature__leading_and_trailing_spaces_are_trimmed },
    { "angle_brackets_in_names_are_not_supported", &test_commit_signature__angle_brackets_in_names_are_not_supported },
    { "angle_brackets_in_email_are_not_supported", &test_commit_signature__angle_brackets_in_email_are_not_supported },
    { "create_empties", &test_commit_signature__create_empties },
    { "create_one_char", &test_commit_signature__create_one_char },
    { "create_two_char", &test_commit_signature__create_two_char },
    { "create_zero_char", &test_commit_signature__create_zero_char }
};
static const struct clar_func _clar_cb_refs_unicode[] = {
    { "create_and_lookup", &test_refs_unicode__create_and_lookup }
};
static const struct clar_func _clar_cb_merge_workdir_dirty[] = {
    { "unaffected_dirty_files_allowed", &test_merge_workdir_dirty__unaffected_dirty_files_allowed },
    { "unstaged_deletes_maintained", &test_merge_workdir_dirty__unstaged_deletes_maintained },
    { "affected_dirty_files_disallowed", &test_merge_workdir_dirty__affected_dirty_files_disallowed },
    { "staged_files_in_index_disallowed", &test_merge_workdir_dirty__staged_files_in_index_disallowed },
    { "identical_staged_files_allowed", &test_merge_workdir_dirty__identical_staged_files_allowed },
    { "honors_cache", &test_merge_workdir_dirty__honors_cache }
};
static const struct clar_func _clar_cb_path_core[] = {
    { "make_relative", &test_path_core__make_relative },
    { "isvalid_standard", &test_path_core__isvalid_standard },
    { "isvalid_empty_dir_component", &test_path_core__isvalid_empty_dir_component },
    { "isvalid_dot_and_dotdot", &test_path_core__isvalid_dot_and_dotdot },
    { "isvalid_dot_git", &test_path_core__isvalid_dot_git },
    { "isvalid_backslash", &test_path_core__isvalid_backslash },
    { "isvalid_trailing_dot", &test_path_core__isvalid_trailing_dot },
    { "isvalid_trailing_space", &test_path_core__isvalid_trailing_space },
    { "isvalid_trailing_colon", &test_path_core__isvalid_trailing_colon },
    { "isvalid_dotgit_ntfs", &test_path_core__isvalid_dotgit_ntfs },
    { "isvalid_dos_paths", &test_path_core__isvalid_dos_paths },
    { "isvalid_dos_paths_withnum", &test_path_core__isvalid_dos_paths_withnum },
    { "isvalid_nt_chars", &test_path_core__isvalid_nt_chars },
    { "isvalid_dotgit_with_hfs_ignorables", &test_path_core__isvalid_dotgit_with_hfs_ignorables },
    { "join_unrooted", &test_path_core__join_unrooted }
};
static const struct clar_func _clar_cb_network_refspecs[] = {
    { "parsing", &test_network_refspecs__parsing },
    { "transform_mid_star", &test_network_refspecs__transform_mid_star },
    { "invalid", &test_network_refspecs__invalid },
    { "invalid_reverse", &test_network_refspecs__invalid_reverse },
    { "matching", &test_network_refspecs__matching }
};
static const struct clar_func _clar_cb_object_raw_short[] = {
    { "oid_shortener_no_duplicates", &test_object_raw_short__oid_shortener_no_duplicates },
    { "oid_shortener_stresstest_git_oid_shorten", &test_object_raw_short__oid_shortener_stresstest_git_oid_shorten },
    { "oid_shortener_too_much_oids", &test_object_raw_short__oid_shortener_too_much_oids }
};
static const struct clar_func _clar_cb_index_reuc[] = {
    { "add", &test_index_reuc__add },
    { "add_no_ancestor", &test_index_reuc__add_no_ancestor },
    { "read_bypath", &test_index_reuc__read_bypath },
    { "ignore_case", &test_index_reuc__ignore_case },
    { "read_byindex", &test_index_reuc__read_byindex },
    { "updates_existing", &test_index_reuc__updates_existing },
    { "remove", &test_index_reuc__remove },
    { "write", &test_index_reuc__write },
    { "cleaned_on_reset_hard", &test_index_reuc__cleaned_on_reset_hard },
    { "cleaned_on_reset_mixed", &test_index_reuc__cleaned_on_reset_mixed },
    { "retained_on_reset_soft", &test_index_reuc__retained_on_reset_soft },
    { "cleaned_on_checkout_tree", &test_index_reuc__cleaned_on_checkout_tree },
    { "cleaned_on_checkout_head", &test_index_reuc__cleaned_on_checkout_head },
    { "retained_on_checkout_index", &test_index_reuc__retained_on_checkout_index }
};
static const struct clar_func _clar_cb_status_worktree[] = {
    { "whole_repository", &test_status_worktree__whole_repository },
    { "show_index_and_workdir", &test_status_worktree__show_index_and_workdir },
    { "show_index_only", &test_status_worktree__show_index_only },
    { "show_workdir_only", &test_status_worktree__show_workdir_only },
    { "empty_repository", &test_status_worktree__empty_repository },
    { "purged_worktree", &test_status_worktree__purged_worktree },
    { "swap_subdir_and_file", &test_status_worktree__swap_subdir_and_file },
    { "swap_subdir_with_recurse_and_pathspec", &test_status_worktree__swap_subdir_with_recurse_and_pathspec },
    { "single_file", &test_status_worktree__single_file },
    { "single_nonexistent_file", &test_status_worktree__single_nonexistent_file },
    { "single_nonexistent_file_empty_repo", &test_status_worktree__single_nonexistent_file_empty_repo },
    { "single_file_empty_repo", &test_status_worktree__single_file_empty_repo },
    { "single_folder", &test_status_worktree__single_folder },
    { "ignores", &test_status_worktree__ignores },
    { "issue_592", &test_status_worktree__issue_592 },
    { "issue_592_2", &test_status_worktree__issue_592_2 },
    { "issue_592_3", &test_status_worktree__issue_592_3 },
    { "issue_592_4", &test_status_worktree__issue_592_4 },
    { "issue_592_5", &test_status_worktree__issue_592_5 },
    { "issue_592_ignores_0", &test_status_worktree__issue_592_ignores_0 },
    { "issue_592_ignored_dirs_with_tracked_content", &test_status_worktree__issue_592_ignored_dirs_with_tracked_content },
    { "conflict_with_diff3", &test_status_worktree__conflict_with_diff3 },
    { "filemode_changes", &test_status_worktree__filemode_changes },
    { "interruptable_foreach", &test_status_worktree__interruptable_foreach },
    { "line_endings_dont_count_as_changes_with_autocrlf", &test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf },
    { "line_endings_dont_count_as_changes_with_autocrlf_issue_1397", &test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397 },
    { "conflicted_item", &test_status_worktree__conflicted_item },
    { "file_status_honors_core_ignorecase_true", &test_status_worktree__file_status_honors_core_ignorecase_true },
    { "file_status_honors_core_ignorecase_false", &test_status_worktree__file_status_honors_core_ignorecase_false },
    { "file_status_honors_case_ignorecase_regarding_untracked_files", &test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files },
    { "simple_delete", &test_status_worktree__simple_delete },
    { "simple_delete_indexed", &test_status_worktree__simple_delete_indexed },
    { "sorting_by_case", &test_status_worktree__sorting_by_case },
    { "long_filenames", &test_status_worktree__long_filenames },
    { "update_stat_cache_0", &test_status_worktree__update_stat_cache_0 },
    { "unreadable", &test_status_worktree__unreadable },
    { "unreadable_not_included", &test_status_worktree__unreadable_not_included },
    { "unreadable_as_untracked", &test_status_worktree__unreadable_as_untracked }
};
static const struct clar_func _clar_cb_core_rmdir[] = {
    { "delete_recursive", &test_core_rmdir__delete_recursive },
    { "fail_to_delete_non_empty_dir", &test_core_rmdir__fail_to_delete_non_empty_dir },
    { "can_skip_non_empty_dir", &test_core_rmdir__can_skip_non_empty_dir },
    { "can_remove_empty_parents", &test_core_rmdir__can_remove_empty_parents }
};
static const struct clar_func _clar_cb_commit_parent[] = {
    { "can_retrieve_nth_generation_parent", &test_commit_parent__can_retrieve_nth_generation_parent }
};
static const struct clar_func _clar_cb_refs_createwithlog[] = {
    { "creating_a_direct_reference_adds_a_reflog_entry", &test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry }
};
static const struct clar_func _clar_cb_diff_patch[] = {
    { "can_properly_display_the_removal_of_a_file", &test_diff_patch__can_properly_display_the_removal_of_a_file },
    { "can_cancel_diff_print", &test_diff_patch__can_cancel_diff_print },
    { "to_string", &test_diff_patch__to_string },
    { "config_options", &test_diff_patch__config_options },
    { "hunks_have_correct_line_numbers", &test_diff_patch__hunks_have_correct_line_numbers },
    { "line_counts_with_eofnl", &test_diff_patch__line_counts_with_eofnl }
};
static const struct clar_func _clar_cb_repo_shallow[] = {
    { "no_shallow_file", &test_repo_shallow__no_shallow_file },
    { "empty_shallow_file", &test_repo_shallow__empty_shallow_file },
    { "shallow_repo", &test_repo_shallow__shallow_repo },
    { "clears_errors", &test_repo_shallow__clears_errors }
};
static const struct clar_func _clar_cb_odb_sorting[] = {
    { "basic_backends_sorting", &test_odb_sorting__basic_backends_sorting },
    { "alternate_backends_sorting", &test_odb_sorting__alternate_backends_sorting }
};
static const struct clar_func _clar_cb_core_pqueue[] = {
    { "items_are_put_in_order", &test_core_pqueue__items_are_put_in_order },
    { "interleave_inserts_and_pops", &test_core_pqueue__interleave_inserts_and_pops },
    { "max_heap_size", &test_core_pqueue__max_heap_size },
    { "interleaved_pushes_and_pops", &test_core_pqueue__interleaved_pushes_and_pops }
};
static const struct clar_func _clar_cb_core_sortedcache[] = {
    { "name_only", &test_core_sortedcache__name_only },
    { "in_memory", &test_core_sortedcache__in_memory },
    { "on_disk", &test_core_sortedcache__on_disk }
};
static const struct clar_func _clar_cb_object_peel[] = {
    { "peeling_an_object_into_its_own_type_returns_another_instance_of_it", &test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it },
    { "tag", &test_object_peel__tag },
    { "commit", &test_object_peel__commit },
    { "tree", &test_object_peel__tree },
    { "blob", &test_object_peel__blob },
    { "target_any_object_for_type_change", &test_object_peel__target_any_object_for_type_change }
};
static const struct clar_func _clar_cb_index_filemodes[] = {
    { "read", &test_index_filemodes__read },
    { "untrusted", &test_index_filemodes__untrusted },
    { "trusted", &test_index_filemodes__trusted },
    { "invalid", &test_index_filemodes__invalid }
};
static const struct clar_func _clar_cb_index_inmemory[] = {
    { "can_create_an_inmemory_index", &test_index_inmemory__can_create_an_inmemory_index },
    { "cannot_add_bypath_to_an_inmemory_index", &test_index_inmemory__cannot_add_bypath_to_an_inmemory_index }
};
static const struct clar_func _clar_cb_diff_diffiter[] = {
    { "create", &test_diff_diffiter__create },
    { "iterate_files_1", &test_diff_diffiter__iterate_files_1 },
    { "iterate_files_2", &test_diff_diffiter__iterate_files_2 },
    { "iterate_files_and_hunks", &test_diff_diffiter__iterate_files_and_hunks },
    { "max_size_threshold", &test_diff_diffiter__max_size_threshold },
    { "iterate_all", &test_diff_diffiter__iterate_all },
    { "iterate_randomly_while_saving_state", &test_diff_diffiter__iterate_randomly_while_saving_state },
    { "iterate_and_generate_patch_text", &test_diff_diffiter__iterate_and_generate_patch_text },
    { "checks_options_version", &test_diff_diffiter__checks_options_version }
};
static const struct clar_func _clar_cb_filter_ident[] = {
    { "to_worktree", &test_filter_ident__to_worktree },
    { "to_odb", &test_filter_ident__to_odb }
};
static const struct clar_func _clar_cb_reset_soft[] = {
    { "can_reset_the_non_detached_Head_to_the_specified_commit", &test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit },
    { "can_reset_the_detached_Head_to_the_specified_commit", &test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit },
    { "resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head", &test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head },
    { "resetting_to_a_tag_sets_the_Head_to_the_peeled_commit", &test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit },
    { "cannot_reset_to_a_tag_not_pointing_at_a_commit", &test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit },
    { "resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn", &test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn },
    { "fails_when_merging", &test_reset_soft__fails_when_merging },
    { "fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence", &test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence }
};
static const struct clar_func _clar_cb_merge_trees_automerge[] = {
    { "automerge", &test_merge_trees_automerge__automerge },
    { "favor_ours", &test_merge_trees_automerge__favor_ours },
    { "favor_theirs", &test_merge_trees_automerge__favor_theirs },
    { "unrelated", &test_merge_trees_automerge__unrelated }
};
static const struct clar_func _clar_cb_refs_reflog_reflog[] = {
    { "append_then_read", &test_refs_reflog_reflog__append_then_read },
    { "renaming_the_reference_moves_the_reflog", &test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog },
    { "reference_has_reflog", &test_refs_reflog_reflog__reference_has_reflog },
    { "reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one", &test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one },
    { "cannot_write_a_moved_reflog", &test_refs_reflog_reflog__cannot_write_a_moved_reflog },
    { "renaming_with_an_invalid_name_returns_EINVALIDSPEC", &test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC },
    { "write_only_std_locations", &test_refs_reflog_reflog__write_only_std_locations },
    { "write_when_explicitly_active", &test_refs_reflog_reflog__write_when_explicitly_active },
    { "append_to_HEAD_when_changing_current_branch", &test_refs_reflog_reflog__append_to_HEAD_when_changing_current_branch },
    { "do_not_append_when_no_update", &test_refs_reflog_reflog__do_not_append_when_no_update },
    { "logallrefupdates_bare_set_false", &test_refs_reflog_reflog__logallrefupdates_bare_set_false },
    { "logallrefupdates_bare_unset", &test_refs_reflog_reflog__logallrefupdates_bare_unset },
    { "logallrefupdates_nonbare_set_false", &test_refs_reflog_reflog__logallrefupdates_nonbare_set_false }
};
static const struct clar_func _clar_cb_core_bitvec[] = {
    { "0", &test_core_bitvec__0 }
};
static const struct clar_func _clar_cb_config_configlevel[] = {
    { "adding_the_same_level_twice_returns_EEXISTS", &test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS },
    { "can_replace_a_config_file_at_an_existing_level", &test_config_configlevel__can_replace_a_config_file_at_an_existing_level },
    { "can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed", &test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed },
    { "fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND", &test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND }
};
static const struct clar_func _clar_cb_core_mkdir[] = {
    { "basic", &test_core_mkdir__basic },
    { "with_base", &test_core_mkdir__with_base },
    { "chmods", &test_core_mkdir__chmods },
    { "mkdir_path_inside_unwriteable_parent", &test_core_mkdir__mkdir_path_inside_unwriteable_parent }
};
static const struct clar_func _clar_cb_checkout_conflict[] = {
    { "ignored", &test_checkout_conflict__ignored },
    { "ours", &test_checkout_conflict__ours },
    { "theirs", &test_checkout_conflict__theirs },
    { "diff3", &test_checkout_conflict__diff3 },
    { "automerge", &test_checkout_conflict__automerge },
    { "directory_file", &test_checkout_conflict__directory_file },
    { "directory_file_with_custom_labels", &test_checkout_conflict__directory_file_with_custom_labels },
    { "link_file", &test_checkout_conflict__link_file },
    { "links", &test_checkout_conflict__links },
    { "add_add", &test_checkout_conflict__add_add },
    { "mode_change", &test_checkout_conflict__mode_change },
    { "renames", &test_checkout_conflict__renames },
    { "rename_keep_ours", &test_checkout_conflict__rename_keep_ours },
    { "name_mangled_file_exists_in_workdir", &test_checkout_conflict__name_mangled_file_exists_in_workdir },
    { "update_only", &test_checkout_conflict__update_only },
    { "path_filters", &test_checkout_conflict__path_filters },
    { "report_progress", &test_checkout_conflict__report_progress }
};
static const struct clar_func _clar_cb_network_matchhost[] = {
    { "match", &test_network_matchhost__match }
};
static const struct clar_func _clar_cb_pack_sharing[] = {
    { "open_two_repos", &test_pack_sharing__open_two_repos }
};
static const struct clar_func _clar_cb_commit_parse[] = {
    { "header", &test_commit_parse__header },
    { "signature", &test_commit_parse__signature },
    { "entire_commit", &test_commit_parse__entire_commit },
    { "details0", &test_commit_parse__details0 },
    { "leading_lf", &test_commit_parse__leading_lf },
    { "only_lf", &test_commit_parse__only_lf }
};
static const struct clar_func _clar_cb_threads_refdb[] = {
    { "iterator", &test_threads_refdb__iterator },
    { "edit_while_iterate", &test_threads_refdb__edit_while_iterate }
};
static const struct clar_func _clar_cb_config_validkeyname[] = {
    { "accessing_requires_a_valid_name", &test_config_validkeyname__accessing_requires_a_valid_name }
};
static const struct clar_func _clar_cb_refs_pack[] = {
    { "empty", &test_refs_pack__empty },
    { "loose", &test_refs_pack__loose },
    { "symbolic", &test_refs_pack__symbolic }
};
static const struct clar_func _clar_cb_transport_register[] = {
    { "custom_transport", &test_transport_register__custom_transport },
    { "custom_transport_error_doubleregister", &test_transport_register__custom_transport_error_doubleregister },
    { "custom_transport_error_remove_non_existing", &test_transport_register__custom_transport_error_remove_non_existing },
    { "custom_transport_ssh", &test_transport_register__custom_transport_ssh }
};
static const struct clar_func _clar_cb_clone_local[] = {
    { "should_clone_local", &test_clone_local__should_clone_local },
    { "hardlinks", &test_clone_local__hardlinks },
    { "standard_unc_paths_are_written_git_style", &test_clone_local__standard_unc_paths_are_written_git_style },
    { "git_style_unc_paths", &test_clone_local__git_style_unc_paths }
};
static const struct clar_func _clar_cb_refs_branches_upstreamname[] = {
    { "can_retrieve_the_remote_tracking_reference_name_of_a_local_branch", &test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch },
    { "can_retrieve_the_local_upstream_reference_name_of_a_local_branch", &test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch }
};
static const struct clar_func _clar_cb_odb_streamwrite[] = {
    { "can_accept_chunks", &test_odb_streamwrite__can_accept_chunks },
    { "can_detect_missing_bytes", &test_odb_streamwrite__can_detect_missing_bytes },
    { "can_detect_additional_bytes", &test_odb_streamwrite__can_detect_additional_bytes }
};
static const struct clar_func _clar_cb_reset_default[] = {
    { "resetting_filepaths_against_a_null_target_removes_them_from_the_index", &test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index },
    { "resetting_filepaths_replaces_their_corresponding_index_entries", &test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries },
    { "resetting_filepaths_clears_previous_conflicts", &test_reset_default__resetting_filepaths_clears_previous_conflicts },
    { "resetting_unknown_filepaths_does_not_fail", &test_reset_default__resetting_unknown_filepaths_does_not_fail },
    { "staged_rename_reset_delete", &test_reset_default__staged_rename_reset_delete }
};
static const struct clar_func _clar_cb_diff_binary[] = {
    { "add_normal", &test_diff_binary__add_normal },
    { "add", &test_diff_binary__add },
    { "modify_normal", &test_diff_binary__modify_normal },
    { "modify", &test_diff_binary__modify },
    { "delete_normal", &test_diff_binary__delete_normal },
    { "delete", &test_diff_binary__delete },
    { "delta", &test_diff_binary__delta },
    { "delta_append", &test_diff_binary__delta_append }
};
static const struct clar_func _clar_cb_refs_settargetwithlog[] = {
    { "updating_a_direct_reference_adds_a_reflog_entry", &test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry }
};
static const struct clar_func _clar_cb_core_dirent[] = {
    { "dont_traverse_dot", &test_core_dirent__dont_traverse_dot },
    { "traverse_subfolder", &test_core_dirent__traverse_subfolder },
    { "traverse_slash_terminated_folder", &test_core_dirent__traverse_slash_terminated_folder },
    { "dont_traverse_empty_folders", &test_core_dirent__dont_traverse_empty_folders },
    { "traverse_weird_filenames", &test_core_dirent__traverse_weird_filenames },
    { "length_limits", &test_core_dirent__length_limits },
    { "empty_dir", &test_core_dirent__empty_dir }
};
static const struct clar_func _clar_cb_refs_transactions[] = {
    { "single_ref_oid", &test_refs_transactions__single_ref_oid },
    { "single_ref_symbolic", &test_refs_transactions__single_ref_symbolic },
    { "single_ref_mix_types", &test_refs_transactions__single_ref_mix_types },
    { "single_ref_delete", &test_refs_transactions__single_ref_delete },
    { "single_create", &test_refs_transactions__single_create },
    { "unlocked_set", &test_refs_transactions__unlocked_set }
};
static const struct clar_func _clar_cb_graph_descendant_of[] = {
    { "returns_correct_result", &test_graph_descendant_of__returns_correct_result },
    { "nopath", &test_graph_descendant_of__nopath }
};
static const struct clar_func _clar_cb_clone_nonetwork[] = {
    { "bad_urls", &test_clone_nonetwork__bad_urls },
    { "do_not_clean_existing_directory", &test_clone_nonetwork__do_not_clean_existing_directory },
    { "local", &test_clone_nonetwork__local },
    { "local_absolute_path", &test_clone_nonetwork__local_absolute_path },
    { "local_bare", &test_clone_nonetwork__local_bare },
    { "fail_when_the_target_is_a_file", &test_clone_nonetwork__fail_when_the_target_is_a_file },
    { "fail_with_already_existing_but_non_empty_directory", &test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory },
    { "custom_origin_name", &test_clone_nonetwork__custom_origin_name },
    { "defaults", &test_clone_nonetwork__defaults },
    { "cope_with_already_existing_directory", &test_clone_nonetwork__cope_with_already_existing_directory },
    { "can_prevent_the_checkout_of_a_standard_repo", &test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo },
    { "can_checkout_given_branch", &test_clone_nonetwork__can_checkout_given_branch },
    { "can_cancel_clone_in_fetch", &test_clone_nonetwork__can_cancel_clone_in_fetch },
    { "can_cancel_clone_in_checkout", &test_clone_nonetwork__can_cancel_clone_in_checkout },
    { "can_detached_head", &test_clone_nonetwork__can_detached_head },
    { "clone_updates_reflog_properly", &test_clone_nonetwork__clone_updates_reflog_properly },
    { "clone_from_empty_sets_upstream", &test_clone_nonetwork__clone_from_empty_sets_upstream }
};
static const struct clar_func _clar_cb_index_tests[] = {
    { "empty_index", &test_index_tests__empty_index },
    { "default_test_index", &test_index_tests__default_test_index },
    { "gitgit_index", &test_index_tests__gitgit_index },
    { "find_in_existing", &test_index_tests__find_in_existing },
    { "find_in_empty", &test_index_tests__find_in_empty },
    { "write", &test_index_tests__write },
    { "sort0", &test_index_tests__sort0 },
    { "sort1", &test_index_tests__sort1 },
    { "add", &test_index_tests__add },
    { "add_issue_1397", &test_index_tests__add_issue_1397 },
    { "add_bypath_to_a_bare_repository_returns_EBAREPO", &test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO },
    { "add_invalid_filename", &test_index_tests__add_invalid_filename },
    { "write_invalid_filename", &test_index_tests__write_invalid_filename },
    { "honors_protect_filesystems", &test_index_tests__honors_protect_filesystems },
    { "remove_entry", &test_index_tests__remove_entry },
    { "remove_directory", &test_index_tests__remove_directory },
    { "preserves_case", &test_index_tests__preserves_case },
    { "elocked", &test_index_tests__elocked },
    { "reload_from_disk", &test_index_tests__reload_from_disk },
    { "corrupted_extension", &test_index_tests__corrupted_extension },
    { "reload_while_ignoring_case", &test_index_tests__reload_while_ignoring_case }
};
static const struct clar_func _clar_cb_commit_commit[] = {
    { "create_unexisting_update_ref", &test_commit_commit__create_unexisting_update_ref },
    { "summary", &test_commit_commit__summary }
};
static const struct clar_func _clar_cb_blame_getters[] = {
    { "byindex", &test_blame_getters__byindex },
    { "byline", &test_blame_getters__byline }
};
static const struct clar_func _clar_cb_blame_harder[] = {
    { "m", &test_blame_harder__m },
    { "c", &test_blame_harder__c },
    { "cc", &test_blame_harder__cc },
    { "ccc", &test_blame_harder__ccc }
};
static const struct clar_func _clar_cb_refs_update[] = {
    { "updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC", &test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC }
};
static const struct clar_func _clar_cb_checkout_tree[] = {
    { "cannot_checkout_a_non_treeish", &test_checkout_tree__cannot_checkout_a_non_treeish },
    { "can_checkout_a_subdirectory_from_a_commit", &test_checkout_tree__can_checkout_a_subdirectory_from_a_commit },
    { "can_checkout_and_remove_directory", &test_checkout_tree__can_checkout_and_remove_directory },
    { "can_checkout_a_subdirectory_from_a_subtree", &test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree },
    { "calls_progress_callback", &test_checkout_tree__calls_progress_callback },
    { "doesnt_write_unrequested_files_to_worktree", &test_checkout_tree__doesnt_write_unrequested_files_to_worktree },
    { "can_switch_branches", &test_checkout_tree__can_switch_branches },
    { "can_remove_untracked", &test_checkout_tree__can_remove_untracked },
    { "can_remove_ignored", &test_checkout_tree__can_remove_ignored },
    { "conflict_on_ignored_when_not_overwriting", &test_checkout_tree__conflict_on_ignored_when_not_overwriting },
    { "can_overwrite_ignored_by_default", &test_checkout_tree__can_overwrite_ignored_by_default },
    { "conflict_on_ignored_folder_when_not_overwriting", &test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting },
    { "can_overwrite_ignored_folder_by_default", &test_checkout_tree__can_overwrite_ignored_folder_by_default },
    { "can_update_only", &test_checkout_tree__can_update_only },
    { "can_checkout_with_pattern", &test_checkout_tree__can_checkout_with_pattern },
    { "can_disable_pattern_match", &test_checkout_tree__can_disable_pattern_match },
    { "checking_out_a_conflicting_type_change_returns_EMERGECONFLICT", &test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT },
    { "checking_out_a_conflicting_type_change_returns_EMERGECONFLICT_2", &test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT_2 },
    { "checking_out_a_conflicting_content_change_returns_EMERGECONFLICT", &test_checkout_tree__checking_out_a_conflicting_content_change_returns_EMERGECONFLICT },
    { "donot_update_deleted_file_by_default", &test_checkout_tree__donot_update_deleted_file_by_default },
    { "can_cancel_checkout_from_notify", &test_checkout_tree__can_cancel_checkout_from_notify },
    { "can_checkout_with_last_workdir_item_missing", &test_checkout_tree__can_checkout_with_last_workdir_item_missing },
    { "issue_1397", &test_checkout_tree__issue_1397 },
    { "can_write_to_empty_dirs", &test_checkout_tree__can_write_to_empty_dirs },
    { "fails_when_dir_in_use", &test_checkout_tree__fails_when_dir_in_use },
    { "can_continue_when_dir_in_use", &test_checkout_tree__can_continue_when_dir_in_use },
    { "target_directory_from_bare", &test_checkout_tree__target_directory_from_bare },
    { "extremely_long_file_name", &test_checkout_tree__extremely_long_file_name },
    { "fails_when_conflicts_exist_in_index", &test_checkout_tree__fails_when_conflicts_exist_in_index },
    { "filemode_preserved_in_index", &test_checkout_tree__filemode_preserved_in_index },
    { "removes_conflicts", &test_checkout_tree__removes_conflicts },
    { "removes_conflicts_only_by_pathscope", &test_checkout_tree__removes_conflicts_only_by_pathscope },
    { "case_changing_rename", &test_checkout_tree__case_changing_rename }
};
static const struct clar_func _clar_cb_index_conflicts[] = {
    { "add", &test_index_conflicts__add },
    { "add_fixes_incorrect_stage", &test_index_conflicts__add_fixes_incorrect_stage },
    { "get", &test_index_conflicts__get },
    { "iterate", &test_index_conflicts__iterate },
    { "remove", &test_index_conflicts__remove },
    { "moved_to_reuc_on_add", &test_index_conflicts__moved_to_reuc_on_add },
    { "moved_to_reuc_on_remove", &test_index_conflicts__moved_to_reuc_on_remove },
    { "remove_all_conflicts", &test_index_conflicts__remove_all_conflicts },
    { "partial", &test_index_conflicts__partial }
};
static const struct clar_func _clar_cb_checkout_index[] = {
    { "cannot_checkout_a_bare_repository", &test_checkout_index__cannot_checkout_a_bare_repository },
    { "can_create_missing_files", &test_checkout_index__can_create_missing_files },
    { "can_remove_untracked_files", &test_checkout_index__can_remove_untracked_files },
    { "honor_the_specified_pathspecs", &test_checkout_index__honor_the_specified_pathspecs },
    { "honor_the_gitattributes_directives", &test_checkout_index__honor_the_gitattributes_directives },
    { "honor_coreautocrlf_setting_set_to_true", &test_checkout_index__honor_coreautocrlf_setting_set_to_true },
    { "honor_coresymlinks_setting_set_to_true", &test_checkout_index__honor_coresymlinks_setting_set_to_true },
    { "honor_coresymlinks_setting_set_to_false", &test_checkout_index__honor_coresymlinks_setting_set_to_false },
    { "donot_overwrite_modified_file_by_default", &test_checkout_index__donot_overwrite_modified_file_by_default },
    { "can_overwrite_modified_file", &test_checkout_index__can_overwrite_modified_file },
    { "options_disable_filters", &test_checkout_index__options_disable_filters },
    { "options_dir_modes", &test_checkout_index__options_dir_modes },
    { "options_override_file_modes", &test_checkout_index__options_override_file_modes },
    { "options_open_flags", &test_checkout_index__options_open_flags },
    { "can_notify_of_skipped_files", &test_checkout_index__can_notify_of_skipped_files },
    { "wont_notify_of_expected_line_ending_changes", &test_checkout_index__wont_notify_of_expected_line_ending_changes },
    { "calls_progress_callback", &test_checkout_index__calls_progress_callback },
    { "can_overcome_name_clashes", &test_checkout_index__can_overcome_name_clashes },
    { "validates_struct_version", &test_checkout_index__validates_struct_version },
    { "can_update_prefixed_files", &test_checkout_index__can_update_prefixed_files },
    { "can_checkout_a_newly_initialized_repository", &test_checkout_index__can_checkout_a_newly_initialized_repository },
    { "issue_1397", &test_checkout_index__issue_1397 },
    { "target_directory", &test_checkout_index__target_directory },
    { "target_directory_from_bare", &test_checkout_index__target_directory_from_bare },
    { "can_get_repo_from_index", &test_checkout_index__can_get_repo_from_index },
    { "writes_conflict_file", &test_checkout_index__writes_conflict_file },
    { "adding_conflict_removes_stage_0", &test_checkout_index__adding_conflict_removes_stage_0 },
    { "conflicts_honor_coreautocrlf", &test_checkout_index__conflicts_honor_coreautocrlf }
};
static const struct clar_func _clar_cb_index_stage[] = {
    { "add_always_adds_stage_0", &test_index_stage__add_always_adds_stage_0 },
    { "find_gets_first_stage", &test_index_stage__find_gets_first_stage }
};
static const struct clar_func _clar_cb_blame_simple[] = {
    { "trivial_testrepo", &test_blame_simple__trivial_testrepo },
    { "trivial_blamerepo", &test_blame_simple__trivial_blamerepo },
    { "trivial_libgit2", &test_blame_simple__trivial_libgit2 },
    { "can_restrict_lines_min", &test_blame_simple__can_restrict_lines_min },
    { "can_restrict_lines_max", &test_blame_simple__can_restrict_lines_max },
    { "can_restrict_lines_both", &test_blame_simple__can_restrict_lines_both },
    { "can_restrict_to_newish_commits", &test_blame_simple__can_restrict_to_newish_commits },
    { "can_restrict_to_first_parent_commits", &test_blame_simple__can_restrict_to_first_parent_commits }
};
static const struct clar_func _clar_cb_core_copy[] = {
    { "file", &test_core_copy__file },
    { "file_in_dir", &test_core_copy__file_in_dir },
    { "tree", &test_core_copy__tree }
};
static const struct clar_func _clar_cb_core_link[] = {
    { "stat_regular_file", &test_core_link__stat_regular_file },
    { "lstat_regular_file", &test_core_link__lstat_regular_file },
    { "stat_symlink", &test_core_link__stat_symlink },
    { "stat_symlink_directory", &test_core_link__stat_symlink_directory },
    { "stat_symlink_chain", &test_core_link__stat_symlink_chain },
    { "stat_dangling_symlink", &test_core_link__stat_dangling_symlink },
    { "stat_dangling_symlink_directory", &test_core_link__stat_dangling_symlink_directory },
    { "lstat_symlink", &test_core_link__lstat_symlink },
    { "lstat_symlink_directory", &test_core_link__lstat_symlink_directory },
    { "lstat_dangling_symlink", &test_core_link__lstat_dangling_symlink },
    { "lstat_dangling_symlink_directory", &test_core_link__lstat_dangling_symlink_directory },
    { "stat_junction", &test_core_link__stat_junction },
    { "stat_dangling_junction", &test_core_link__stat_dangling_junction },
    { "lstat_junction", &test_core_link__lstat_junction },
    { "lstat_dangling_junction", &test_core_link__lstat_dangling_junction },
    { "stat_hardlink", &test_core_link__stat_hardlink },
    { "lstat_hardlink", &test_core_link__lstat_hardlink },
    { "stat_reparse_point", &test_core_link__stat_reparse_point },
    { "lstat_reparse_point", &test_core_link__lstat_reparse_point },
    { "readlink_nonexistent_file", &test_core_link__readlink_nonexistent_file },
    { "readlink_normal_file", &test_core_link__readlink_normal_file },
    { "readlink_symlink", &test_core_link__readlink_symlink },
    { "readlink_dangling", &test_core_link__readlink_dangling },
    { "readlink_multiple", &test_core_link__readlink_multiple }
};
static const struct clar_func _clar_cb_diff_submodules[] = {
    { "unmodified_submodule", &test_diff_submodules__unmodified_submodule },
    { "dirty_submodule", &test_diff_submodules__dirty_submodule },
    { "dirty_submodule_2", &test_diff_submodules__dirty_submodule_2 },
    { "submod2_index_to_wd", &test_diff_submodules__submod2_index_to_wd },
    { "submod2_head_to_index", &test_diff_submodules__submod2_head_to_index },
    { "invalid_cache", &test_diff_submodules__invalid_cache },
    { "diff_ignore_options", &test_diff_submodules__diff_ignore_options },
    { "skips_empty_includes_used", &test_diff_submodules__skips_empty_includes_used }
};
static const struct clar_func _clar_cb_object_raw_type2string[] = {
    { "convert_type_to_string", &test_object_raw_type2string__convert_type_to_string },
    { "convert_string_to_type", &test_object_raw_type2string__convert_string_to_type },
    { "check_type_is_loose", &test_object_raw_type2string__check_type_is_loose }
};
static const struct clar_func _clar_cb_attr_file[] = {
    { "simple_read", &test_attr_file__simple_read },
    { "match_variants", &test_attr_file__match_variants },
    { "assign_variants", &test_attr_file__assign_variants },
    { "check_attr_examples", &test_attr_file__check_attr_examples }
};
static const struct clar_func _clar_cb_refs_branches_name[] = {
    { "can_get_local_branch_name", &test_refs_branches_name__can_get_local_branch_name },
    { "can_get_remote_branch_name", &test_refs_branches_name__can_get_remote_branch_name },
    { "error_when_ref_is_no_branch", &test_refs_branches_name__error_when_ref_is_no_branch }
};
static const struct clar_func _clar_cb_attr_flags[] = {
    { "bare", &test_attr_flags__bare },
    { "index_vs_workdir", &test_attr_flags__index_vs_workdir },
    { "subdir", &test_attr_flags__subdir }
};
static const struct clar_func _clar_cb_refs_crashes[] = {
    { "double_free", &test_refs_crashes__double_free }
};
static const struct clar_func _clar_cb_merge_files[] = {
    { "automerge_from_bufs", &test_merge_files__automerge_from_bufs },
    { "automerge_use_best_path_and_mode", &test_merge_files__automerge_use_best_path_and_mode },
    { "conflict_from_bufs", &test_merge_files__conflict_from_bufs },
    { "automerge_from_index", &test_merge_files__automerge_from_index }
};
static const struct clar_func _clar_cb_core_features[] = {
    { "0", &test_core_features__0 }
};
static const struct clar_func _clar_cb_merge_trees_renames[] = {
    { "index", &test_merge_trees_renames__index },
    { "no_rename_index", &test_merge_trees_renames__no_rename_index }
};
static const struct clar_func _clar_cb_network_remote_createthenload[] = {
    { "parsing", &test_network_remote_createthenload__parsing }
};
static const struct clar_func _clar_cb_odb_packed[] = {
    { "mass_read", &test_odb_packed__mass_read },
    { "read_header_0", &test_odb_packed__read_header_0 },
    { "read_header_1", &test_odb_packed__read_header_1 }
};
static const struct clar_func _clar_cb_submodule_nosubs[] = {
    { "lookup", &test_submodule_nosubs__lookup },
    { "immediate_reload", &test_submodule_nosubs__immediate_reload },
    { "foreach", &test_submodule_nosubs__foreach },
    { "add", &test_submodule_nosubs__add },
    { "reload_add_reload", &test_submodule_nosubs__reload_add_reload },
    { "bad_gitmodules", &test_submodule_nosubs__bad_gitmodules },
    { "add_and_delete", &test_submodule_nosubs__add_and_delete }
};
static const struct clar_func _clar_cb_cherrypick_bare[] = {
    { "automerge", &test_cherrypick_bare__automerge },
    { "conflicts", &test_cherrypick_bare__conflicts },
    { "orphan", &test_cherrypick_bare__orphan }
};
static const struct clar_func _clar_cb_refs_reflog_drop[] = {
    { "dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND", &test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND },
    { "can_drop_an_entry", &test_refs_reflog_drop__can_drop_an_entry },
    { "can_drop_an_entry_and_rewrite_the_log_history", &test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history },
    { "can_drop_the_oldest_entry", &test_refs_reflog_drop__can_drop_the_oldest_entry },
    { "can_drop_the_oldest_entry_and_rewrite_the_log_history", &test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history },
    { "can_drop_all_the_entries", &test_refs_reflog_drop__can_drop_all_the_entries },
    { "can_persist_deletion_on_disk", &test_refs_reflog_drop__can_persist_deletion_on_disk }
};
static const struct clar_func _clar_cb_online_push[] = {
    { "noop", &test_online_push__noop },
    { "b1", &test_online_push__b1 },
    { "b2", &test_online_push__b2 },
    { "b3", &test_online_push__b3 },
    { "b4", &test_online_push__b4 },
    { "b5", &test_online_push__b5 },
    { "b5_cancel", &test_online_push__b5_cancel },
    { "multi", &test_online_push__multi },
    { "implicit_tgt", &test_online_push__implicit_tgt },
    { "fast_fwd", &test_online_push__fast_fwd },
    { "tag_commit", &test_online_push__tag_commit },
    { "tag_tree", &test_online_push__tag_tree },
    { "tag_blob", &test_online_push__tag_blob },
    { "tag_lightweight", &test_online_push__tag_lightweight },
    { "tag_to_tag", &test_online_push__tag_to_tag },
    { "force", &test_online_push__force },
    { "delete", &test_online_push__delete },
    { "bad_refspecs", &test_online_push__bad_refspecs },
    { "expressions", &test_online_push__expressions },
    { "notes", &test_online_push__notes },
    { "configured", &test_online_push__configured }
};
static const struct clar_func _clar_cb_trace_trace[] = {
    { "sets", &test_trace_trace__sets },
    { "can_reset", &test_trace_trace__can_reset },
    { "can_unset", &test_trace_trace__can_unset },
    { "skips_higher_level", &test_trace_trace__skips_higher_level },
    { "writes", &test_trace_trace__writes },
    { "writes_lower_level", &test_trace_trace__writes_lower_level }
};
static const struct clar_func _clar_cb_object_raw_hash[] = {
    { "hash_by_blocks", &test_object_raw_hash__hash_by_blocks },
    { "hash_buffer_in_single_call", &test_object_raw_hash__hash_buffer_in_single_call },
    { "hash_vector", &test_object_raw_hash__hash_vector },
    { "hash_junk_data", &test_object_raw_hash__hash_junk_data },
    { "hash_commit_object", &test_object_raw_hash__hash_commit_object },
    { "hash_tree_object", &test_object_raw_hash__hash_tree_object },
    { "hash_tag_object", &test_object_raw_hash__hash_tag_object },
    { "hash_zero_length_object", &test_object_raw_hash__hash_zero_length_object },
    { "hash_one_byte_object", &test_object_raw_hash__hash_one_byte_object },
    { "hash_two_byte_object", &test_object_raw_hash__hash_two_byte_object },
    { "hash_multi_byte_object", &test_object_raw_hash__hash_multi_byte_object }
};
static const struct clar_func _clar_cb_checkout_binaryunicode[] = {
    { "noautocrlf", &test_checkout_binaryunicode__noautocrlf },
    { "autocrlf", &test_checkout_binaryunicode__autocrlf }
};
static const struct clar_func _clar_cb_odb_emptyobjects[] = {
    { "read", &test_odb_emptyobjects__read },
    { "read_tree", &test_odb_emptyobjects__read_tree },
    { "read_tree_odb", &test_odb_emptyobjects__read_tree_odb }
};
static const struct clar_func _clar_cb_object_blob_filter[] = {
    { "unfiltered", &test_object_blob_filter__unfiltered },
    { "stats", &test_object_blob_filter__stats },
    { "to_odb", &test_object_blob_filter__to_odb }
};
static const struct clar_func _clar_cb_core_strtol[] = {
    { "int32", &test_core_strtol__int32 },
    { "int64", &test_core_strtol__int64 }
};
static const struct clar_func _clar_cb_core_stat[] = {
    { "0", &test_core_stat__0 },
    { "root", &test_core_stat__root }
};
static const struct clar_func _clar_cb_diff_pathspec[] = {
    { "0", &test_diff_pathspec__0 }
};
static const struct clar_func _clar_cb_index_collision[] = {
    { "add", &test_index_collision__add },
    { "add_with_highstage_1", &test_index_collision__add_with_highstage_1 },
    { "add_with_highstage_2", &test_index_collision__add_with_highstage_2 }
};
static const struct clar_func _clar_cb_merge_trees_treediff[] = {
    { "simple", &test_merge_trees_treediff__simple },
    { "df_conflicts", &test_merge_trees_treediff__df_conflicts },
    { "strict_renames", &test_merge_trees_treediff__strict_renames },
    { "rename_conflicts", &test_merge_trees_treediff__rename_conflicts },
    { "best_renames", &test_merge_trees_treediff__best_renames }
};
static const struct clar_func _clar_cb_object_lookupbypath[] = {
    { "errors", &test_object_lookupbypath__errors },
    { "from_root_tree", &test_object_lookupbypath__from_root_tree },
    { "from_head_commit", &test_object_lookupbypath__from_head_commit },
    { "from_subdir_tree", &test_object_lookupbypath__from_subdir_tree }
};
static const struct clar_func _clar_cb_object_tag_list[] = {
    { "list_all", &test_object_tag_list__list_all },
    { "list_by_pattern", &test_object_tag_list__list_by_pattern }
};
static const struct clar_func _clar_cb_clone_empty[] = {
    { "can_clone_an_empty_local_repo_barely", &test_clone_empty__can_clone_an_empty_local_repo_barely },
    { "can_clone_an_empty_local_repo", &test_clone_empty__can_clone_an_empty_local_repo },
    { "can_clone_an_empty_standard_repo", &test_clone_empty__can_clone_an_empty_standard_repo }
};
static const struct clar_func _clar_cb_diff_iterator[] = {
    { "tree_0", &test_diff_iterator__tree_0 },
    { "tree_1", &test_diff_iterator__tree_1 },
    { "tree_2", &test_diff_iterator__tree_2 },
    { "tree_3", &test_diff_iterator__tree_3 },
    { "tree_4", &test_diff_iterator__tree_4 },
    { "tree_4_ranged", &test_diff_iterator__tree_4_ranged },
    { "tree_ranged_0", &test_diff_iterator__tree_ranged_0 },
    { "tree_ranged_1", &test_diff_iterator__tree_ranged_1 },
    { "tree_range_empty_0", &test_diff_iterator__tree_range_empty_0 },
    { "tree_range_empty_1", &test_diff_iterator__tree_range_empty_1 },
    { "tree_range_empty_2", &test_diff_iterator__tree_range_empty_2 },
    { "tree_special_functions", &test_diff_iterator__tree_special_functions },
    { "index_0", &test_diff_iterator__index_0 },
    { "index_range", &test_diff_iterator__index_range },
    { "index_range_empty_0", &test_diff_iterator__index_range_empty_0 },
    { "index_range_empty_1", &test_diff_iterator__index_range_empty_1 },
    { "index_range_empty_2", &test_diff_iterator__index_range_empty_2 },
    { "index_1", &test_diff_iterator__index_1 },
    { "index_case_folding", &test_diff_iterator__index_case_folding },
    { "workdir_0", &test_diff_iterator__workdir_0 },
    { "workdir_1", &test_diff_iterator__workdir_1 },
    { "workdir_1_ranged_0", &test_diff_iterator__workdir_1_ranged_0 },
    { "workdir_1_ranged_1", &test_diff_iterator__workdir_1_ranged_1 },
    { "workdir_1_ranged_3", &test_diff_iterator__workdir_1_ranged_3 },
    { "workdir_1_ranged_4", &test_diff_iterator__workdir_1_ranged_4 },
    { "workdir_1_ranged_5", &test_diff_iterator__workdir_1_ranged_5 },
    { "workdir_1_ranged_empty_0", &test_diff_iterator__workdir_1_ranged_empty_0 },
    { "workdir_1_ranged_empty_1", &test_diff_iterator__workdir_1_ranged_empty_1 },
    { "workdir_1_ranged_empty_2", &test_diff_iterator__workdir_1_ranged_empty_2 },
    { "workdir_builtin_ignores", &test_diff_iterator__workdir_builtin_ignores },
    { "workdir_handles_icase_range", &test_diff_iterator__workdir_handles_icase_range },
    { "tree_handles_icase_range", &test_diff_iterator__tree_handles_icase_range },
    { "index_handles_icase_range", &test_diff_iterator__index_handles_icase_range }
};
static const struct clar_func _clar_cb_core_vector[] = {
    { "0", &test_core_vector__0 },
    { "1", &test_core_vector__1 },
    { "2", &test_core_vector__2 },
    { "3", &test_core_vector__3 },
    { "4", &test_core_vector__4 },
    { "5", &test_core_vector__5 },
    { "remove_matching", &test_core_vector__remove_matching }
};
static const struct clar_func _clar_cb_config_read[] = {
    { "simple_read", &test_config_read__simple_read },
    { "case_sensitive", &test_config_read__case_sensitive },
    { "multiline_value", &test_config_read__multiline_value },
    { "subsection_header", &test_config_read__subsection_header },
    { "lone_variable", &test_config_read__lone_variable },
    { "number_suffixes", &test_config_read__number_suffixes },
    { "blank_lines", &test_config_read__blank_lines },
    { "invalid_ext_headers", &test_config_read__invalid_ext_headers },
    { "empty_files", &test_config_read__empty_files },
    { "symbol_headers", &test_config_read__symbol_headers },
    { "header_in_last_line", &test_config_read__header_in_last_line },
    { "prefixes", &test_config_read__prefixes },
    { "escaping_quotes", &test_config_read__escaping_quotes },
    { "foreach", &test_config_read__foreach },
    { "iterator", &test_config_read__iterator },
    { "foreach_match", &test_config_read__foreach_match },
    { "iterator_invalid_glob", &test_config_read__iterator_invalid_glob },
    { "iterator_glob", &test_config_read__iterator_glob },
    { "whitespace_not_required_around_assignment", &test_config_read__whitespace_not_required_around_assignment },
    { "read_git_config_entry", &test_config_read__read_git_config_entry },
    { "local_config_overrides_global_config_overrides_system_config", &test_config_read__local_config_overrides_global_config_overrides_system_config },
    { "fallback_from_local_to_global_and_from_global_to_system", &test_config_read__fallback_from_local_to_global_and_from_global_to_system },
    { "simple_read_from_specific_level", &test_config_read__simple_read_from_specific_level },
    { "can_load_and_parse_an_empty_config_file", &test_config_read__can_load_and_parse_an_empty_config_file },
    { "corrupt_header", &test_config_read__corrupt_header },
    { "corrupt_header2", &test_config_read__corrupt_header2 },
    { "corrupt_header3", &test_config_read__corrupt_header3 },
    { "override_variable", &test_config_read__override_variable }
};
static const struct clar_func _clar_cb_submodule_repository_init[] = {
    { "basic", &test_submodule_repository_init__basic }
};
static const struct clar_func _clar_cb_rebase_merge[] = {
    { "next", &test_rebase_merge__next },
    { "next_with_conflicts", &test_rebase_merge__next_with_conflicts },
    { "next_stops_with_iterover", &test_rebase_merge__next_stops_with_iterover },
    { "commit", &test_rebase_merge__commit },
    { "commit_updates_rewritten", &test_rebase_merge__commit_updates_rewritten },
    { "commit_drops_already_applied", &test_rebase_merge__commit_drops_already_applied },
    { "finish", &test_rebase_merge__finish },
    { "copy_notes_off_by_default", &test_rebase_merge__copy_notes_off_by_default },
    { "copy_notes_specified_in_options", &test_rebase_merge__copy_notes_specified_in_options },
    { "copy_notes_specified_in_config", &test_rebase_merge__copy_notes_specified_in_config },
    { "copy_notes_disabled_in_config", &test_rebase_merge__copy_notes_disabled_in_config }
};
static const struct clar_func _clar_cb_odb_alternates[] = {
    { "chained", &test_odb_alternates__chained },
    { "long_chain", &test_odb_alternates__long_chain }
};
static const struct clar_func _clar_cb_merge_trees_trivial[] = {
    { "2alt", &test_merge_trees_trivial__2alt },
    { "3alt", &test_merge_trees_trivial__3alt },
    { "4", &test_merge_trees_trivial__4 },
    { "5alt_1", &test_merge_trees_trivial__5alt_1 },
    { "5alt_2", &test_merge_trees_trivial__5alt_2 },
    { "6", &test_merge_trees_trivial__6 },
    { "8", &test_merge_trees_trivial__8 },
    { "7", &test_merge_trees_trivial__7 },
    { "10", &test_merge_trees_trivial__10 },
    { "9", &test_merge_trees_trivial__9 },
    { "13", &test_merge_trees_trivial__13 },
    { "14", &test_merge_trees_trivial__14 },
    { "11", &test_merge_trees_trivial__11 }
};
static const struct clar_func _clar_cb_core_posix[] = {
    { "inet_pton", &test_core_posix__inet_pton }
};
static const struct clar_func _clar_cb_core_env[] = {
    { "0", &test_core_env__0 },
    { "1", &test_core_env__1 },
    { "2", &test_core_env__2 }
};
static const struct clar_func _clar_cb_clone_transport[] = {
    { "custom_transport", &test_clone_transport__custom_transport }
};
static const struct clar_func _clar_cb_online_clone[] = {
    { "network_full", &test_online_clone__network_full },
    { "network_bare", &test_online_clone__network_bare },
    { "empty_repository", &test_online_clone__empty_repository },
    { "can_checkout_a_cloned_repo", &test_online_clone__can_checkout_a_cloned_repo },
    { "clone_mirror", &test_online_clone__clone_mirror },
    { "custom_remote_callbacks", &test_online_clone__custom_remote_callbacks },
    { "cred_callback_failure_return_code_is_tunnelled", &test_online_clone__cred_callback_failure_return_code_is_tunnelled },
    { "cred_callback_called_again_on_auth_failure", &test_online_clone__cred_callback_called_again_on_auth_failure },
    { "credentials", &test_online_clone__credentials },
    { "bitbucket_style", &test_online_clone__bitbucket_style },
    { "can_cancel", &test_online_clone__can_cancel },
    { "ssh_auth_methods", &test_online_clone__ssh_auth_methods },
    { "ssh_with_paths", &test_online_clone__ssh_with_paths },
    { "ssh_cannot_change_username", &test_online_clone__ssh_cannot_change_username },
    { "ssh_cert", &test_online_clone__ssh_cert },
    { "url_with_no_path_returns_EINVALIDSPEC", &test_online_clone__url_with_no_path_returns_EINVALIDSPEC },
    { "certificate_invalid", &test_online_clone__certificate_invalid },
    { "certificate_valid", &test_online_clone__certificate_valid }
};
static const struct clar_func _clar_cb_status_single[] = {
    { "hash_single_file", &test_status_single__hash_single_file },
    { "hash_single_empty_file", &test_status_single__hash_single_empty_file }
};
static const struct clar_func _clar_cb_odb_loose[] = {
    { "exists", &test_odb_loose__exists },
    { "simple_reads", &test_odb_loose__simple_reads },
    { "permissions_standard", &test_odb_loose__permissions_standard },
    { "permissions_readwrite", &test_odb_loose__permissions_readwrite }
};
static const struct clar_func _clar_cb_revwalk_signatureparsing[] = {
    { "do_not_choke_when_name_contains_angle_brackets", &test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets }
};
static const struct clar_func _clar_cb_submodule_status[] = {
    { "unchanged", &test_submodule_status__unchanged },
    { "ignore_none", &test_submodule_status__ignore_none },
    { "ignore_untracked", &test_submodule_status__ignore_untracked },
    { "ignore_dirty", &test_submodule_status__ignore_dirty },
    { "ignore_all", &test_submodule_status__ignore_all },
    { "iterator", &test_submodule_status__iterator },
    { "untracked_dirs_containing_ignored_files", &test_submodule_status__untracked_dirs_containing_ignored_files }
};
static const struct clar_func _clar_cb_checkout_typechange[] = {
    { "checkout_typechanges_safe", &test_checkout_typechange__checkout_typechanges_safe },
    { "checkout_with_conflicts", &test_checkout_typechange__checkout_with_conflicts }
};
static const struct clar_func _clar_cb_refs_branches_remote[] = {
    { "can_get_remote_for_branch", &test_refs_branches_remote__can_get_remote_for_branch },
    { "no_matching_remote_returns_error", &test_refs_branches_remote__no_matching_remote_returns_error },
    { "local_remote_returns_error", &test_refs_branches_remote__local_remote_returns_error },
    { "ambiguous_remote_returns_error", &test_refs_branches_remote__ambiguous_remote_returns_error }
};
static const struct clar_func _clar_cb_config_include[] = {
    { "relative", &test_config_include__relative },
    { "absolute", &test_config_include__absolute },
    { "homedir", &test_config_include__homedir },
    { "ordering", &test_config_include__ordering },
    { "depth", &test_config_include__depth },
    { "missing", &test_config_include__missing }
};
static const struct clar_func _clar_cb_core_iconv[] = {
    { "unchanged", &test_core_iconv__unchanged },
    { "decomposed_to_precomposed", &test_core_iconv__decomposed_to_precomposed },
    { "precomposed_is_unmodified", &test_core_iconv__precomposed_is_unmodified }
};
static const struct clar_func _clar_cb_core_filebuf[] = {
    { "0", &test_core_filebuf__0 },
    { "1", &test_core_filebuf__1 },
    { "2", &test_core_filebuf__2 },
    { "4", &test_core_filebuf__4 },
    { "5", &test_core_filebuf__5 },
    { "umask", &test_core_filebuf__umask }
};
static const struct clar_func _clar_cb_refs_isvalidname[] = {
    { "can_detect_invalid_formats", &test_refs_isvalidname__can_detect_invalid_formats },
    { "wont_hopefully_choke_on_valid_formats", &test_refs_isvalidname__wont_hopefully_choke_on_valid_formats }
};
static const struct clar_func _clar_cb_refs_create[] = {
    { "symbolic", &test_refs_create__symbolic },
    { "deep_symbolic", &test_refs_create__deep_symbolic },
    { "oid", &test_refs_create__oid },
    { "oid_unknown", &test_refs_create__oid_unknown },
    { "propagate_eexists", &test_refs_create__propagate_eexists },
    { "creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC", &test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC },
    { "creating_a_loose_ref_with_invalid_windows_name", &test_refs_create__creating_a_loose_ref_with_invalid_windows_name }
};
static const struct clar_func _clar_cb_checkout_icase[] = {
    { "overwrites_files_for_files", &test_checkout_icase__overwrites_files_for_files },
    { "overwrites_links_for_files", &test_checkout_icase__overwrites_links_for_files },
    { "overwites_folders_for_files", &test_checkout_icase__overwites_folders_for_files },
    { "overwrites_files_for_folders", &test_checkout_icase__overwrites_files_for_folders },
    { "overwrites_links_for_folders", &test_checkout_icase__overwrites_links_for_folders }
};
static const struct clar_func _clar_cb_merge_workdir_analysis[] = {
    { "fastforward", &test_merge_workdir_analysis__fastforward },
    { "no_fastforward", &test_merge_workdir_analysis__no_fastforward },
    { "uptodate", &test_merge_workdir_analysis__uptodate },
    { "uptodate_merging_prev_commit", &test_merge_workdir_analysis__uptodate_merging_prev_commit },
    { "unborn", &test_merge_workdir_analysis__unborn },
    { "fastforward_with_config_noff", &test_merge_workdir_analysis__fastforward_with_config_noff },
    { "no_fastforward_with_config_ffonly", &test_merge_workdir_analysis__no_fastforward_with_config_ffonly }
};
static const struct clar_func _clar_cb_object_raw_fromstr[] = {
    { "fail_on_invalid_oid_string", &test_object_raw_fromstr__fail_on_invalid_oid_string },
    { "succeed_on_valid_oid_string", &test_object_raw_fromstr__succeed_on_valid_oid_string }
};
static const struct clar_func _clar_cb_refs_branches_upstream[] = {
    { "can_retrieve_the_remote_tracking_reference_of_a_local_branch", &test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch },
    { "can_retrieve_the_local_upstream_reference_of_a_local_branch", &test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch },
    { "cannot_retrieve_a_remote_upstream_reference_from_a_non_branch", &test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch },
    { "trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND", &test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND },
    { "trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND", &test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND },
    { "upstream_remote", &test_refs_branches_upstream__upstream_remote },
    { "upstream_remote_empty_value", &test_refs_branches_upstream__upstream_remote_empty_value },
    { "retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND", &test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND },
    { "set_unset_upstream", &test_refs_branches_upstream__set_unset_upstream }
};
static const struct clar_func _clar_cb_reset_hard[] = {
    { "resetting_reverts_modified_files", &test_reset_hard__resetting_reverts_modified_files },
    { "cannot_reset_in_a_bare_repository", &test_reset_hard__cannot_reset_in_a_bare_repository },
    { "resetting_reverts_unmerged", &test_reset_hard__resetting_reverts_unmerged },
    { "cleans_up_merge", &test_reset_hard__cleans_up_merge },
    { "reflog_is_correct", &test_reset_hard__reflog_is_correct }
};
static const struct clar_func _clar_cb_object_raw_convert[] = {
    { "succeed_on_oid_to_string_conversion", &test_object_raw_convert__succeed_on_oid_to_string_conversion },
    { "succeed_on_oid_to_string_conversion_big", &test_object_raw_convert__succeed_on_oid_to_string_conversion_big },
    { "convert_oid_partially", &test_object_raw_convert__convert_oid_partially }
};
static const struct clar_func _clar_cb_diff_drivers[] = {
    { "patterns", &test_diff_drivers__patterns },
    { "long_lines", &test_diff_drivers__long_lines },
    { "builtins", &test_diff_drivers__builtins }
};
static const struct clar_func _clar_cb_core_path[] = {
    { "00_dirname", &test_core_path__00_dirname },
    { "01_basename", &test_core_path__01_basename },
    { "02_topdir", &test_core_path__02_topdir },
    { "05_joins", &test_core_path__05_joins },
    { "06_long_joins", &test_core_path__06_long_joins },
    { "07_path_to_dir", &test_core_path__07_path_to_dir },
    { "08_self_join", &test_core_path__08_self_join },
    { "09_percent_decode", &test_core_path__09_percent_decode },
    { "10_fromurl", &test_core_path__10_fromurl },
    { "11_walkup", &test_core_path__11_walkup },
    { "11a_walkup_cancel", &test_core_path__11a_walkup_cancel },
    { "12_offset_to_path_root", &test_core_path__12_offset_to_path_root },
    { "13_cannot_prettify_a_non_existing_file", &test_core_path__13_cannot_prettify_a_non_existing_file },
    { "14_apply_relative", &test_core_path__14_apply_relative },
    { "15_resolve_relative", &test_core_path__15_resolve_relative }
};
static const struct clar_func _clar_cb_repo_setters[] = {
    { "setting_a_workdir_turns_a_bare_repository_into_a_standard_one", &test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one },
    { "setting_a_workdir_prettifies_its_path", &test_repo_setters__setting_a_workdir_prettifies_its_path },
    { "setting_a_workdir_creates_a_gitlink", &test_repo_setters__setting_a_workdir_creates_a_gitlink },
    { "setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount", &test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount },
    { "setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount", &test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount }
};
static const struct clar_func _clar_cb_refs_revparse[] = {
    { "nonexistant_object", &test_refs_revparse__nonexistant_object },
    { "invalid_reference_name", &test_refs_revparse__invalid_reference_name },
    { "shas", &test_refs_revparse__shas },
    { "head", &test_refs_revparse__head },
    { "full_refs", &test_refs_revparse__full_refs },
    { "partial_refs", &test_refs_revparse__partial_refs },
    { "describe_output", &test_refs_revparse__describe_output },
    { "nth_parent", &test_refs_revparse__nth_parent },
    { "not_tag", &test_refs_revparse__not_tag },
    { "to_type", &test_refs_revparse__to_type },
    { "linear_history", &test_refs_revparse__linear_history },
    { "chaining", &test_refs_revparse__chaining },
    { "upstream", &test_refs_revparse__upstream },
    { "ordinal", &test_refs_revparse__ordinal },
    { "previous_head", &test_refs_revparse__previous_head },
    { "reflog_of_a_ref_under_refs", &test_refs_revparse__reflog_of_a_ref_under_refs },
    { "revwalk", &test_refs_revparse__revwalk },
    { "date", &test_refs_revparse__date },
    { "colon", &test_refs_revparse__colon },
    { "disambiguation", &test_refs_revparse__disambiguation },
    { "a_too_short_objectid_returns_EAMBIGUOUS", &test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS },
    { "a_not_precise_enough_objectid_returns_EAMBIGUOUS", &test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS },
    { "issue_994", &test_refs_revparse__issue_994 },
    { "try_to_retrieve_branch_before_described_tag", &test_refs_revparse__try_to_retrieve_branch_before_described_tag },
    { "try_to_retrieve_sha_before_branch", &test_refs_revparse__try_to_retrieve_sha_before_branch },
    { "try_to_retrieve_branch_before_abbrev_sha", &test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha },
    { "range", &test_refs_revparse__range },
    { "parses_range_operator", &test_refs_revparse__parses_range_operator },
    { "ext_retrieves_both_the_reference_and_its_target", &test_refs_revparse__ext_retrieves_both_the_reference_and_its_target },
    { "ext_can_expand_short_reference_names", &test_refs_revparse__ext_can_expand_short_reference_names },
    { "ext_returns_NULL_reference_when_expression_points_at_a_revision", &test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision },
    { "ext_returns_NULL_reference_when_expression_points_at_a_tree_content", &test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content }
};
static const struct clar_func _clar_cb_index_names[] = {
    { "add", &test_index_names__add },
    { "roundtrip", &test_index_names__roundtrip },
    { "cleaned_on_reset_hard", &test_index_names__cleaned_on_reset_hard },
    { "cleaned_on_reset_mixed", &test_index_names__cleaned_on_reset_mixed },
    { "cleaned_on_checkout_tree", &test_index_names__cleaned_on_checkout_tree },
    { "cleaned_on_checkout_head", &test_index_names__cleaned_on_checkout_head },
    { "retained_on_checkout_index", &test_index_names__retained_on_checkout_index }
};
static const struct clar_func _clar_cb_refs_races[] = {
    { "create_matching", &test_refs_races__create_matching },
    { "symbolic_create_matching", &test_refs_races__symbolic_create_matching },
    { "delete", &test_refs_races__delete },
    { "switch_oid_to_symbolic", &test_refs_races__switch_oid_to_symbolic },
    { "switch_symbolic_to_oid", &test_refs_races__switch_symbolic_to_oid }
};
static const struct clar_func _clar_cb_odb_foreach[] = {
    { "foreach", &test_odb_foreach__foreach },
    { "one_pack", &test_odb_foreach__one_pack },
    { "interrupt_foreach", &test_odb_foreach__interrupt_foreach },
    { "files_in_objects_dir", &test_odb_foreach__files_in_objects_dir }
};
static const struct clar_func _clar_cb_describe_t6120[] = {
    { "default", &test_describe_t6120__default },
    { "tags", &test_describe_t6120__tags },
    { "all", &test_describe_t6120__all },
    { "longformat", &test_describe_t6120__longformat },
    { "firstparent", &test_describe_t6120__firstparent },
    { "workdir", &test_describe_t6120__workdir },
    { "pattern", &test_describe_t6120__pattern }
};
static const struct clar_func _clar_cb_object_raw_size[] = {
    { "validate_oid_size", &test_object_raw_size__validate_oid_size }
};
static const struct clar_func _clar_cb_notes_notesref[] = {
    { "config_corenotesref", &test_notes_notesref__config_corenotesref }
};
static const struct clar_func _clar_cb_config_new[] = {
    { "write_new_config", &test_config_new__write_new_config }
};
static const struct clar_func _clar_cb_describe_describe[] = {
    { "can_describe_against_a_bare_repo", &test_describe_describe__can_describe_against_a_bare_repo },
    { "cannot_describe_against_a_repo_with_no_ref", &test_describe_describe__cannot_describe_against_a_repo_with_no_ref }
};
static const struct clar_func _clar_cb_diff_stats[] = {
    { "stat", &test_diff_stats__stat },
    { "multiple_hunks", &test_diff_stats__multiple_hunks },
    { "numstat", &test_diff_stats__numstat },
    { "shortstat", &test_diff_stats__shortstat },
    { "rename", &test_diff_stats__rename },
    { "rename_nochanges", &test_diff_stats__rename_nochanges },
    { "rename_and_modifiy", &test_diff_stats__rename_and_modifiy },
    { "rename_no_find", &test_diff_stats__rename_no_find },
    { "rename_nochanges_no_find", &test_diff_stats__rename_nochanges_no_find },
    { "rename_and_modifiy_no_find", &test_diff_stats__rename_and_modifiy_no_find },
    { "binary", &test_diff_stats__binary },
    { "binary_numstat", &test_diff_stats__binary_numstat },
    { "mode_change", &test_diff_stats__mode_change }
};
static const struct clar_func _clar_cb_buf_basic[] = {
    { "resize", &test_buf_basic__resize },
    { "printf", &test_buf_basic__printf }
};
static const struct clar_func _clar_cb_object_tree_duplicateentries[] = {
    { "cannot_create_a_duplicate_entry_through_the_treebuilder", &test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder },
    { "cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts", &test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts }
};
static const struct clar_func _clar_cb_stress_diff[] = {
    { "rename_big_files", &test_stress_diff__rename_big_files },
    { "rename_many_files", &test_stress_diff__rename_many_files }
};
static const struct clar_func _clar_cb_refs_branches_ishead[] = {
    { "can_tell_if_a_branch_is_pointed_at_by_HEAD", &test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD },
    { "can_properly_handle_unborn_HEAD", &test_refs_branches_ishead__can_properly_handle_unborn_HEAD },
    { "can_properly_handle_missing_HEAD", &test_refs_branches_ishead__can_properly_handle_missing_HEAD },
    { "can_tell_if_a_branch_is_not_pointed_at_by_HEAD", &test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD },
    { "wont_be_fooled_by_a_non_branch", &test_refs_branches_ishead__wont_be_fooled_by_a_non_branch },
    { "only_direct_references_are_considered", &test_refs_branches_ishead__only_direct_references_are_considered }
};
static const struct clar_func _clar_cb_online_fetchhead[] = {
    { "wildcard_spec", &test_online_fetchhead__wildcard_spec },
    { "explicit_spec", &test_online_fetchhead__explicit_spec },
    { "no_merges", &test_online_fetchhead__no_merges }
};
static const struct clar_func _clar_cb_diff_notify[] = {
    { "notify_single_pathspec", &test_diff_notify__notify_single_pathspec },
    { "notify_multiple_pathspec", &test_diff_notify__notify_multiple_pathspec },
    { "notify_catchall_with_empty_pathspecs", &test_diff_notify__notify_catchall_with_empty_pathspecs },
    { "notify_catchall", &test_diff_notify__notify_catchall },
    { "notify_cb_can_abort_diff", &test_diff_notify__notify_cb_can_abort_diff },
    { "notify_cb_can_be_used_as_filtering_function", &test_diff_notify__notify_cb_can_be_used_as_filtering_function }
};
static const struct clar_func _clar_cb_rebase_abort[] = {
    { "merge", &test_rebase_abort__merge },
    { "detached_head", &test_rebase_abort__detached_head },
    { "old_style_head_file", &test_rebase_abort__old_style_head_file }
};
static const struct clar_func _clar_cb_revwalk_hidecb[] = {
    { "hide_all_cb", &test_revwalk_hidecb__hide_all_cb },
    { "hide_none_cb", &test_revwalk_hidecb__hide_none_cb },
    { "add_hide_cb_multiple_times", &test_revwalk_hidecb__add_hide_cb_multiple_times },
    { "add_hide_cb_during_walking", &test_revwalk_hidecb__add_hide_cb_during_walking },
    { "hide_some_commits", &test_revwalk_hidecb__hide_some_commits },
    { "test_payload", &test_revwalk_hidecb__test_payload }
};
static const struct clar_func _clar_cb_core_hex[] = {
    { "fromhex", &test_core_hex__fromhex }
};
static const struct clar_func _clar_cb_core_string[] = {
    { "0", &test_core_string__0 },
    { "1", &test_core_string__1 },
    { "2", &test_core_string__2 }
};
static const struct clar_func _clar_cb_pack_indexer[] = {
    { "out_of_order", &test_pack_indexer__out_of_order },
    { "fix_thin", &test_pack_indexer__fix_thin }
};
static const struct clar_func _clar_cb_object_raw_compare[] = {
    { "succeed_on_copy_oid", &test_object_raw_compare__succeed_on_copy_oid },
    { "succeed_on_oid_comparison_lesser", &test_object_raw_compare__succeed_on_oid_comparison_lesser },
    { "succeed_on_oid_comparison_equal", &test_object_raw_compare__succeed_on_oid_comparison_equal },
    { "succeed_on_oid_comparison_greater", &test_object_raw_compare__succeed_on_oid_comparison_greater },
    { "compare_fmt_oids", &test_object_raw_compare__compare_fmt_oids },
    { "compare_static_oids", &test_object_raw_compare__compare_static_oids },
    { "compare_pathfmt_oids", &test_object_raw_compare__compare_pathfmt_oids }
};
static const struct clar_func _clar_cb_object_commit_commitstagedfile[] = {
    { "generate_predictable_object_ids", &test_object_commit_commitstagedfile__generate_predictable_object_ids },
    { "amend_commit", &test_object_commit_commitstagedfile__amend_commit }
};
static const struct clar_func _clar_cb_diff_blob[] = {
    { "can_compare_text_blobs", &test_diff_blob__can_compare_text_blobs },
    { "can_compare_text_blobs_with_patch", &test_diff_blob__can_compare_text_blobs_with_patch },
    { "can_compare_against_null_blobs", &test_diff_blob__can_compare_against_null_blobs },
    { "can_compare_against_null_blobs_with_patch", &test_diff_blob__can_compare_against_null_blobs_with_patch },
    { "can_compare_identical_blobs", &test_diff_blob__can_compare_identical_blobs },
    { "can_compare_identical_blobs_with_patch", &test_diff_blob__can_compare_identical_blobs_with_patch },
    { "can_compare_two_binary_blobs", &test_diff_blob__can_compare_two_binary_blobs },
    { "can_compare_a_binary_blob_and_a_text_blob", &test_diff_blob__can_compare_a_binary_blob_and_a_text_blob },
    { "comparing_two_text_blobs_honors_interhunkcontext", &test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext },
    { "checks_options_version_too_low", &test_diff_blob__checks_options_version_too_low },
    { "checks_options_version_too_high", &test_diff_blob__checks_options_version_too_high },
    { "can_correctly_detect_a_binary_blob_as_binary", &test_diff_blob__can_correctly_detect_a_binary_blob_as_binary },
    { "can_correctly_detect_a_textual_blob_as_non_binary", &test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary },
    { "can_compare_blob_to_buffer", &test_diff_blob__can_compare_blob_to_buffer },
    { "can_compare_blob_to_buffer_with_patch", &test_diff_blob__can_compare_blob_to_buffer_with_patch },
    { "binary_data_comparisons", &test_diff_blob__binary_data_comparisons },
    { "using_path_and_attributes", &test_diff_blob__using_path_and_attributes },
    { "can_compare_buffer_to_buffer", &test_diff_blob__can_compare_buffer_to_buffer }
};
static const struct clar_func _clar_cb_date_date[] = {
    { "overflow", &test_date_date__overflow }
};
static const struct clar_func _clar_cb_odb_backend_nobackend[] = {
    { "write_fails_gracefully", &test_odb_backend_nobackend__write_fails_gracefully }
};
static const struct clar_func _clar_cb_core_opts[] = {
    { "readwrite", &test_core_opts__readwrite }
};
static const struct clar_func _clar_cb_repo_state[] = {
    { "none_with_HEAD_attached", &test_repo_state__none_with_HEAD_attached },
    { "none_with_HEAD_detached", &test_repo_state__none_with_HEAD_detached },
    { "merge", &test_repo_state__merge },
    { "revert", &test_repo_state__revert },
    { "cherry_pick", &test_repo_state__cherry_pick },
    { "bisect", &test_repo_state__bisect },
    { "rebase_interactive", &test_repo_state__rebase_interactive },
    { "rebase_merge", &test_repo_state__rebase_merge },
    { "rebase", &test_repo_state__rebase },
    { "apply_mailbox", &test_repo_state__apply_mailbox },
    { "apply_mailbox_or_rebase", &test_repo_state__apply_mailbox_or_rebase }
};
static const struct clar_func _clar_cb_config_backend[] = {
    { "checks_version", &test_config_backend__checks_version }
};
static const struct clar_func _clar_cb_index_cache[] = {
    { "write_extension_at_root", &test_index_cache__write_extension_at_root },
    { "write_extension_invalidated_root", &test_index_cache__write_extension_invalidated_root },
    { "read_tree_no_children", &test_index_cache__read_tree_no_children },
    { "two_levels", &test_index_cache__two_levels },
    { "read_tree_children", &test_index_cache__read_tree_children }
};
static const struct clar_func _clar_cb_network_fetchlocal[] = {
    { "complete", &test_network_fetchlocal__complete },
    { "prune", &test_network_fetchlocal__prune },
    { "prune_overlapping", &test_network_fetchlocal__prune_overlapping },
    { "fetchprune", &test_network_fetchlocal__fetchprune },
    { "prune_tag", &test_network_fetchlocal__prune_tag },
    { "partial", &test_network_fetchlocal__partial },
    { "clone_into_mirror", &test_network_fetchlocal__clone_into_mirror },
    { "multi_remotes", &test_network_fetchlocal__multi_remotes },
    { "call_progress", &test_network_fetchlocal__call_progress },
    { "prune_load_remote_prune_config", &test_network_fetchlocal__prune_load_remote_prune_config },
    { "prune_load_fetch_prune_config", &test_network_fetchlocal__prune_load_fetch_prune_config }
};
static const struct clar_func _clar_cb_path_win32[] = {
    { "utf8_to_utf16", &test_path_win32__utf8_to_utf16 },
    { "removes_trailing_slash", &test_path_win32__removes_trailing_slash },
    { "squashes_multiple_slashes", &test_path_win32__squashes_multiple_slashes },
    { "unc", &test_path_win32__unc },
    { "honors_max_path", &test_path_win32__honors_max_path },
    { "dot_and_dotdot", &test_path_win32__dot_and_dotdot },
    { "absolute_from_no_drive_letter", &test_path_win32__absolute_from_no_drive_letter },
    { "absolute_from_relative", &test_path_win32__absolute_from_relative },
    { "canonicalize", &test_path_win32__canonicalize },
    { "8dot3_name", &test_path_win32__8dot3_name }
};
static const struct clar_func _clar_cb_checkout_head[] = {
    { "unborn_head_returns_GIT_EUNBORNBRANCH", &test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH },
    { "with_index_only_tree", &test_checkout_head__with_index_only_tree }
};
static const struct clar_func _clar_cb_odb_mixed[] = {
    { "dup_oid", &test_odb_mixed__dup_oid },
    { "dup_oid_prefix_0", &test_odb_mixed__dup_oid_prefix_0 }
};
static const struct clar_func _clar_cb_object_message[] = {
    { "long_lines_without_spaces_should_be_unchanged", &test_object_message__long_lines_without_spaces_should_be_unchanged },
    { "lines_with_spaces_at_the_beginning_should_be_unchanged", &test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged },
    { "lines_with_intermediate_spaces_should_be_unchanged", &test_object_message__lines_with_intermediate_spaces_should_be_unchanged },
    { "consecutive_blank_lines_should_be_unified", &test_object_message__consecutive_blank_lines_should_be_unified },
    { "only_consecutive_blank_lines_should_be_completely_removed", &test_object_message__only_consecutive_blank_lines_should_be_completely_removed },
    { "consecutive_blank_lines_at_the_beginning_should_be_removed", &test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed },
    { "consecutive_blank_lines_at_the_end_should_be_removed", &test_object_message__consecutive_blank_lines_at_the_end_should_be_removed },
    { "text_without_newline_at_end_should_end_with_newline", &test_object_message__text_without_newline_at_end_should_end_with_newline },
    { "text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline", &test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline },
    { "text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain", &test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain },
    { "spaces_with_newline_at_end_should_be_replaced_with_empty_string", &test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string },
    { "spaces_without_newline_at_end_should_be_replaced_with_empty_string", &test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string },
    { "consecutive_text_lines_should_be_unchanged", &test_object_message__consecutive_text_lines_should_be_unchanged },
    { "strip_comments", &test_object_message__strip_comments },
    { "keep_comments", &test_object_message__keep_comments },
    { "message_prettify", &test_object_message__message_prettify }
};
static const struct clar_func _clar_cb_filter_custom[] = {
    { "to_odb", &test_filter_custom__to_odb },
    { "to_workdir", &test_filter_custom__to_workdir },
    { "can_register_a_custom_filter_in_the_repository", &test_filter_custom__can_register_a_custom_filter_in_the_repository },
    { "order_dependency", &test_filter_custom__order_dependency },
    { "filter_registry_failure_cases", &test_filter_custom__filter_registry_failure_cases }
};
static const struct clar_func _clar_cb_index_addall[] = {
    { "repo_lifecycle", &test_index_addall__repo_lifecycle },
    { "callback_filtering", &test_index_addall__callback_filtering }
};
static const struct clar_func _clar_cb_refs_shorthand[] = {
    { "0", &test_refs_shorthand__0 }
};
static const struct clar_func _clar_cb_index_read_tree[] = {
    { "read_write_involution", &test_index_read_tree__read_write_involution }
};
static const struct clar_func _clar_cb_cherrypick_workdir[] = {
    { "automerge", &test_cherrypick_workdir__automerge },
    { "empty_result", &test_cherrypick_workdir__empty_result },
    { "conflicts", &test_cherrypick_workdir__conflicts },
    { "conflict_use_ours", &test_cherrypick_workdir__conflict_use_ours },
    { "rename", &test_cherrypick_workdir__rename },
    { "both_renamed", &test_cherrypick_workdir__both_renamed },
    { "nonmerge_fails_mainline_specified", &test_cherrypick_workdir__nonmerge_fails_mainline_specified },
    { "merge_fails_without_mainline_specified", &test_cherrypick_workdir__merge_fails_without_mainline_specified },
    { "merge_first_parent", &test_cherrypick_workdir__merge_first_parent },
    { "merge_second_parent", &test_cherrypick_workdir__merge_second_parent }
};
static const struct clar_func _clar_cb_object_blob_fromchunks[] = {
    { "can_create_a_blob_from_a_in_memory_chunk_provider", &test_object_blob_fromchunks__can_create_a_blob_from_a_in_memory_chunk_provider },
    { "doesnot_overwrite_an_already_existing_object", &test_object_blob_fromchunks__doesnot_overwrite_an_already_existing_object },
    { "creating_a_blob_from_chunks_honors_the_attributes_directives", &test_object_blob_fromchunks__creating_a_blob_from_chunks_honors_the_attributes_directives },
    { "can_stop_with_error", &test_object_blob_fromchunks__can_stop_with_error }
};
static const struct clar_func _clar_cb_repo_config[] = {
    { "can_open_global_when_there_is_no_file", &test_repo_config__can_open_global_when_there_is_no_file },
    { "can_open_missing_global_with_separators", &test_repo_config__can_open_missing_global_with_separators },
    { "read_with_no_configs_at_all", &test_repo_config__read_with_no_configs_at_all }
};
static const struct clar_func _clar_cb_odb_packed_one[] = {
    { "mass_read", &test_odb_packed_one__mass_read },
    { "read_header_0", &test_odb_packed_one__read_header_0 }
};
static const struct clar_func _clar_cb_core_oid[] = {
    { "streq", &test_core_oid__streq },
    { "strcmp", &test_core_oid__strcmp },
    { "ncmp", &test_core_oid__ncmp }
};
static const struct clar_func _clar_cb_attr_ignore[] = {
    { "honor_temporary_rules", &test_attr_ignore__honor_temporary_rules },
    { "allow_root", &test_attr_ignore__allow_root },
    { "ignore_root", &test_attr_ignore__ignore_root },
    { "full_paths", &test_attr_ignore__full_paths },
    { "more_starstar_cases", &test_attr_ignore__more_starstar_cases },
    { "leading_stars", &test_attr_ignore__leading_stars },
    { "skip_gitignore_directory", &test_attr_ignore__skip_gitignore_directory },
    { "subdirectory_gitignore", &test_attr_ignore__subdirectory_gitignore },
    { "expand_tilde_to_homedir", &test_attr_ignore__expand_tilde_to_homedir },
    { "gitignore_in_subdir", &test_attr_ignore__gitignore_in_subdir },
    { "dont_ignore_files_for_folder", &test_attr_ignore__dont_ignore_files_for_folder }
};
static const struct clar_func _clar_cb_refs_listall[] = {
    { "from_repository_opened_through_workdir_path", &test_refs_listall__from_repository_opened_through_workdir_path },
    { "from_repository_opened_through_gitdir_path", &test_refs_listall__from_repository_opened_through_gitdir_path },
    { "from_repository_with_no_trailing_newline", &test_refs_listall__from_repository_with_no_trailing_newline }
};
static const struct clar_func _clar_cb_config_snapshot[] = {
    { "create_snapshot", &test_config_snapshot__create_snapshot },
    { "multivar", &test_config_snapshot__multivar }
};
static const struct clar_func _clar_cb_status_worktree_init[] = {
    { "cannot_retrieve_the_status_of_a_bare_repository", &test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository },
    { "first_commit_in_progress", &test_status_worktree_init__first_commit_in_progress },
    { "status_file_without_index_or_workdir", &test_status_worktree_init__status_file_without_index_or_workdir },
    { "status_file_with_clean_index_and_empty_workdir", &test_status_worktree_init__status_file_with_clean_index_and_empty_workdir },
    { "bracket_in_filename", &test_status_worktree_init__bracket_in_filename },
    { "space_in_filename", &test_status_worktree_init__space_in_filename },
    { "disable_pathspec_match", &test_status_worktree_init__disable_pathspec_match },
    { "new_staged_file_must_handle_crlf", &test_status_worktree_init__new_staged_file_must_handle_crlf }
};
static const struct clar_func _clar_cb_core_zstream[] = {
    { "basic", &test_core_zstream__basic },
    { "buffer", &test_core_zstream__buffer },
    { "big_data", &test_core_zstream__big_data }
};
static const struct clar_func _clar_cb_stash_save[] = {
    { "does_not_keep_index_by_default", &test_stash_save__does_not_keep_index_by_default },
    { "can_keep_index", &test_stash_save__can_keep_index },
    { "can_include_untracked_files", &test_stash_save__can_include_untracked_files },
    { "untracked_skips_ignored", &test_stash_save__untracked_skips_ignored },
    { "can_include_untracked_and_ignored_files", &test_stash_save__can_include_untracked_and_ignored_files },
    { "can_accept_a_message", &test_stash_save__can_accept_a_message },
    { "cannot_stash_against_an_unborn_branch", &test_stash_save__cannot_stash_against_an_unborn_branch },
    { "cannot_stash_against_a_bare_repository", &test_stash_save__cannot_stash_against_a_bare_repository },
    { "can_stash_against_a_detached_head", &test_stash_save__can_stash_against_a_detached_head },
    { "stashing_updates_the_reflog", &test_stash_save__stashing_updates_the_reflog },
    { "cannot_stash_when_there_are_no_local_change", &test_stash_save__cannot_stash_when_there_are_no_local_change },
    { "can_stage_normal_then_stage_untracked", &test_stash_save__can_stage_normal_then_stage_untracked },
    { "including_untracked_without_any_untracked_file_creates_an_empty_tree", &test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree },
    { "ignored_directory", &test_stash_save__ignored_directory },
    { "skip_submodules", &test_stash_save__skip_submodules }
};
static const struct clar_func _clar_cb_date_rfc2822[] = {
    { "format_rfc2822_no_offset", &test_date_rfc2822__format_rfc2822_no_offset },
    { "format_rfc2822_positive_offset", &test_date_rfc2822__format_rfc2822_positive_offset },
    { "format_rfc2822_negative_offset", &test_date_rfc2822__format_rfc2822_negative_offset },
    { "format_rfc2822_buffer_too_small", &test_date_rfc2822__format_rfc2822_buffer_too_small }
};
static const struct clar_func _clar_cb_repo_discover[] = {
    { "0", &test_repo_discover__0 }
};
static const struct clar_func _clar_cb_refs_foreachglob[] = {
    { "retrieve_all_refs", &test_refs_foreachglob__retrieve_all_refs },
    { "retrieve_remote_branches", &test_refs_foreachglob__retrieve_remote_branches },
    { "retrieve_local_branches", &test_refs_foreachglob__retrieve_local_branches },
    { "retrieve_partially_named_references", &test_refs_foreachglob__retrieve_partially_named_references },
    { "can_cancel", &test_refs_foreachglob__can_cancel }
};
static const struct clar_func _clar_cb_core_buffer[] = {
    { "0", &test_core_buffer__0 },
    { "1", &test_core_buffer__1 },
    { "2", &test_core_buffer__2 },
    { "3", &test_core_buffer__3 },
    { "4", &test_core_buffer__4 },
    { "5", &test_core_buffer__5 },
    { "6", &test_core_buffer__6 },
    { "7", &test_core_buffer__7 },
    { "8", &test_core_buffer__8 },
    { "9", &test_core_buffer__9 },
    { "10", &test_core_buffer__10 },
    { "join3", &test_core_buffer__join3 },
    { "11", &test_core_buffer__11 },
    { "rfind_variants", &test_core_buffer__rfind_variants },
    { "puts_escaped", &test_core_buffer__puts_escaped },
    { "unescape", &test_core_buffer__unescape },
    { "encode_base64", &test_core_buffer__encode_base64 },
    { "decode_base64", &test_core_buffer__decode_base64 },
    { "encode_base85", &test_core_buffer__encode_base85 },
    { "classify_with_utf8", &test_core_buffer__classify_with_utf8 },
    { "similarity_metric", &test_core_buffer__similarity_metric },
    { "similarity_metric_whitespace", &test_core_buffer__similarity_metric_whitespace },
    { "lf_and_crlf_conversions", &test_core_buffer__lf_and_crlf_conversions }
};
static const struct clar_func _clar_cb_buf_oom[] = {
    { "grow", &test_buf_oom__grow }
};
static const struct clar_func _clar_cb_refs_setter[] = {
    { "update_direct", &test_refs_setter__update_direct },
    { "update_symbolic", &test_refs_setter__update_symbolic },
    { "cant_update_direct_with_symbolic", &test_refs_setter__cant_update_direct_with_symbolic },
    { "cant_update_symbolic_with_direct", &test_refs_setter__cant_update_symbolic_with_direct }
};
static const struct clar_func _clar_cb_config_rename[] = {
    { "can_rename", &test_config_rename__can_rename },
    { "prevent_overwrite", &test_config_rename__prevent_overwrite },
    { "require_a_valid_new_name", &test_config_rename__require_a_valid_new_name }
};
static const struct clar_func _clar_cb_config_stress[] = {
    { "dont_break_on_invalid_input", &test_config_stress__dont_break_on_invalid_input },
    { "comments", &test_config_stress__comments },
    { "escape_subsection_names", &test_config_stress__escape_subsection_names },
    { "trailing_backslash", &test_config_stress__trailing_backslash },
    { "complex", &test_config_stress__complex }
};
static const struct clar_func _clar_cb_config_write[] = {
    { "replace_value", &test_config_write__replace_value },
    { "delete_value", &test_config_write__delete_value },
    { "delete_value_at_specific_level", &test_config_write__delete_value_at_specific_level },
    { "write_subsection", &test_config_write__write_subsection },
    { "delete_inexistent", &test_config_write__delete_inexistent },
    { "value_containing_quotes", &test_config_write__value_containing_quotes },
    { "escape_value", &test_config_write__escape_value },
    { "add_value_at_specific_level", &test_config_write__add_value_at_specific_level },
    { "add_value_at_file_with_no_clrf_at_the_end", &test_config_write__add_value_at_file_with_no_clrf_at_the_end },
    { "add_section_at_file_with_no_clrf_at_the_end", &test_config_write__add_section_at_file_with_no_clrf_at_the_end },
    { "add_value_which_needs_quotes", &test_config_write__add_value_which_needs_quotes },
    { "can_set_a_value_to_NULL", &test_config_write__can_set_a_value_to_NULL },
    { "can_set_an_empty_value", &test_config_write__can_set_an_empty_value },
    { "updating_a_locked_config_file_returns_ELOCKED", &test_config_write__updating_a_locked_config_file_returns_ELOCKED },
    { "outside_change", &test_config_write__outside_change }
};
static const struct clar_func _clar_cb_core_init[] = {
    { "returns_count", &test_core_init__returns_count }
};
static const struct clar_func _clar_cb_network_remote_defaultbranch[] = {
    { "master", &test_network_remote_defaultbranch__master },
    { "master_does_not_win", &test_network_remote_defaultbranch__master_does_not_win },
    { "master_on_detached", &test_network_remote_defaultbranch__master_on_detached },
    { "no_default_branch", &test_network_remote_defaultbranch__no_default_branch },
    { "detached_sharing_nonbranch_id", &test_network_remote_defaultbranch__detached_sharing_nonbranch_id },
    { "unborn_HEAD_with_branches", &test_network_remote_defaultbranch__unborn_HEAD_with_branches }
};
static const struct clar_func _clar_cb_object_tree_attributes[] = {
    { "ensure_correctness_of_attributes_on_insertion", &test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion },
    { "group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed", &test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed },
    { "treebuilder_reject_invalid_filemode", &test_object_tree_attributes__treebuilder_reject_invalid_filemode },
    { "normalize_attributes_when_creating_a_tree_from_an_existing_one", &test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one },
    { "normalize_600", &test_object_tree_attributes__normalize_600 }
};
static const struct clar_func _clar_cb_checkout_crlf[] = {
    { "detect_crlf_autocrlf_false", &test_checkout_crlf__detect_crlf_autocrlf_false },
    { "autocrlf_false_index_size_is_unfiltered_size", &test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size },
    { "detect_crlf_autocrlf_true", &test_checkout_crlf__detect_crlf_autocrlf_true },
    { "more_lf_autocrlf_true", &test_checkout_crlf__more_lf_autocrlf_true },
    { "more_crlf_autocrlf_true", &test_checkout_crlf__more_crlf_autocrlf_true },
    { "all_crlf_autocrlf_true", &test_checkout_crlf__all_crlf_autocrlf_true },
    { "autocrlf_true_index_size_is_filtered_size", &test_checkout_crlf__autocrlf_true_index_size_is_filtered_size },
    { "with_ident", &test_checkout_crlf__with_ident },
    { "autocrlf_false_no_attrs", &test_checkout_crlf__autocrlf_false_no_attrs },
    { "autocrlf_true_no_attrs", &test_checkout_crlf__autocrlf_true_no_attrs },
    { "autocrlf_input_no_attrs", &test_checkout_crlf__autocrlf_input_no_attrs },
    { "autocrlf_false_text_auto_attr", &test_checkout_crlf__autocrlf_false_text_auto_attr },
    { "autocrlf_true_text_auto_attr", &test_checkout_crlf__autocrlf_true_text_auto_attr },
    { "autocrlf_input_text_auto_attr", &test_checkout_crlf__autocrlf_input_text_auto_attr }
};
static const struct clar_func _clar_cb_core_errors[] = {
    { "public_api", &test_core_errors__public_api },
    { "new_school", &test_core_errors__new_school },
    { "restore", &test_core_errors__restore }
};
static const struct clar_func _clar_cb_config_multivar[] = {
    { "foreach", &test_config_multivar__foreach },
    { "get", &test_config_multivar__get },
    { "add", &test_config_multivar__add },
    { "add_new", &test_config_multivar__add_new },
    { "replace", &test_config_multivar__replace },
    { "replace_multiple", &test_config_multivar__replace_multiple },
    { "delete", &test_config_multivar__delete },
    { "delete_multiple", &test_config_multivar__delete_multiple },
    { "delete_notfound", &test_config_multivar__delete_notfound }
};
static const struct clar_func _clar_cb_network_urlparse[] = {
    { "trivial", &test_network_urlparse__trivial },
    { "root", &test_network_urlparse__root },
    { "just_hostname", &test_network_urlparse__just_hostname },
    { "encoded_password", &test_network_urlparse__encoded_password },
    { "user", &test_network_urlparse__user },
    { "user_pass", &test_network_urlparse__user_pass },
    { "port", &test_network_urlparse__port },
    { "user_port", &test_network_urlparse__user_port },
    { "user_pass_port", &test_network_urlparse__user_pass_port },
    { "connection_data_http", &test_network_urlparse__connection_data_http },
    { "connection_data_ssl", &test_network_urlparse__connection_data_ssl },
    { "encoded_username_password", &test_network_urlparse__encoded_username_password },
    { "connection_data_cross_host_redirect", &test_network_urlparse__connection_data_cross_host_redirect },
    { "connection_data_http_downgrade", &test_network_urlparse__connection_data_http_downgrade },
    { "connection_data_relative_redirect", &test_network_urlparse__connection_data_relative_redirect },
    { "connection_data_relative_redirect_ssl", &test_network_urlparse__connection_data_relative_redirect_ssl },
    { "connection_data_cleanup", &test_network_urlparse__connection_data_cleanup }
};
static const struct clar_func _clar_cb_refs_overwrite[] = {
    { "symbolic", &test_refs_overwrite__symbolic },
    { "object_id", &test_refs_overwrite__object_id },
    { "object_id_with_symbolic", &test_refs_overwrite__object_id_with_symbolic },
    { "symbolic_with_object_id", &test_refs_overwrite__symbolic_with_object_id }
};
static const struct clar_func _clar_cb_network_remote_remotes[] = {
    { "parsing", &test_network_remote_remotes__parsing },
    { "pushurl", &test_network_remote_remotes__pushurl },
    { "error_when_not_found", &test_network_remote_remotes__error_when_not_found },
    { "error_when_no_push_available", &test_network_remote_remotes__error_when_no_push_available },
    { "refspec_parsing", &test_network_remote_remotes__refspec_parsing },
    { "add_fetchspec", &test_network_remote_remotes__add_fetchspec },
    { "dup", &test_network_remote_remotes__dup },
    { "add_pushspec", &test_network_remote_remotes__add_pushspec },
    { "save", &test_network_remote_remotes__save },
    { "fnmatch", &test_network_remote_remotes__fnmatch },
    { "transform", &test_network_remote_remotes__transform },
    { "transform_destination_to_source", &test_network_remote_remotes__transform_destination_to_source },
    { "missing_refspecs", &test_network_remote_remotes__missing_refspecs },
    { "nonmatch_upstream_refspec", &test_network_remote_remotes__nonmatch_upstream_refspec },
    { "list", &test_network_remote_remotes__list },
    { "loading_a_missing_remote_returns_ENOTFOUND", &test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND },
    { "loading_with_an_invalid_name_returns_EINVALIDSPEC", &test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC },
    { "add", &test_network_remote_remotes__add },
    { "cannot_add_a_nameless_remote", &test_network_remote_remotes__cannot_add_a_nameless_remote },
    { "cannot_save_an_inmemory_remote", &test_network_remote_remotes__cannot_save_an_inmemory_remote },
    { "cannot_add_a_remote_with_an_invalid_name", &test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name },
    { "tagopt", &test_network_remote_remotes__tagopt },
    { "can_load_with_an_empty_url", &test_network_remote_remotes__can_load_with_an_empty_url },
    { "can_load_with_only_an_empty_pushurl", &test_network_remote_remotes__can_load_with_only_an_empty_pushurl },
    { "returns_ENOTFOUND_when_neither_url_nor_pushurl", &test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl },
    { "cannot_create_a_remote_which_name_conflicts_with_an_existing_remote", &test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote },
    { "cannot_create_a_remote_which_name_is_invalid", &test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid },
    { "query_refspecs", &test_network_remote_remotes__query_refspecs },
    { "fetch_from_anonymous", &test_network_remote_remotes__fetch_from_anonymous },
    { "single_branch", &test_network_remote_remotes__single_branch },
    { "restricted_refspecs", &test_network_remote_remotes__restricted_refspecs }
};
static const struct clar_func _clar_cb_network_remote_delete[] = {
    { "remove_remote_tracking_branches", &test_network_remote_delete__remove_remote_tracking_branches },
    { "remove_remote_configuration_settings", &test_network_remote_delete__remove_remote_configuration_settings },
    { "remove_branch_upstream_configuration_settings", &test_network_remote_delete__remove_branch_upstream_configuration_settings }
};
static const struct clar_func _clar_cb_attr_repo[] = {
    { "get_one", &test_attr_repo__get_one },
    { "get_one_start_deep", &test_attr_repo__get_one_start_deep },
    { "get_many", &test_attr_repo__get_many },
    { "get_many_in_place", &test_attr_repo__get_many_in_place },
    { "foreach", &test_attr_repo__foreach },
    { "manpage_example", &test_attr_repo__manpage_example },
    { "macros", &test_attr_repo__macros },
    { "bad_macros", &test_attr_repo__bad_macros },
    { "staging_properly_normalizes_line_endings_according_to_gitattributes_directives", &test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives },
    { "bare_repo_with_index", &test_attr_repo__bare_repo_with_index }
};
static const struct clar_func _clar_cb_merge_trees_commits[] = {
    { "automerge", &test_merge_trees_commits__automerge },
    { "no_ancestor", &test_merge_trees_commits__no_ancestor },
    { "df_conflict", &test_merge_trees_commits__df_conflict }
};
static const struct clar_func _clar_cb_pack_packbuilder[] = {
    { "create_pack", &test_pack_packbuilder__create_pack },
    { "get_hash", &test_pack_packbuilder__get_hash },
    { "permissions_standard", &test_pack_packbuilder__permissions_standard },
    { "permissions_readonly", &test_pack_packbuilder__permissions_readonly },
    { "permissions_readwrite", &test_pack_packbuilder__permissions_readwrite },
    { "foreach", &test_pack_packbuilder__foreach },
    { "foreach_with_cancel", &test_pack_packbuilder__foreach_with_cancel }
};
static const struct clar_func _clar_cb_submodule_modify[] = {
    { "init", &test_submodule_modify__init },
    { "sync", &test_submodule_modify__sync },
    { "edit_and_save", &test_submodule_modify__edit_and_save }
};
static const struct clar_func _clar_cb_network_cred[] = {
    { "stock_userpass_validates_args", &test_network_cred__stock_userpass_validates_args },
    { "stock_userpass_validates_that_method_is_allowed", &test_network_cred__stock_userpass_validates_that_method_is_allowed },
    { "stock_userpass_properly_handles_username_in_url", &test_network_cred__stock_userpass_properly_handles_username_in_url }
};
static const struct clar_func _clar_cb_refs_branches_move[] = {
    { "can_move_a_local_branch", &test_refs_branches_move__can_move_a_local_branch },
    { "can_move_a_local_branch_to_a_different_namespace", &test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace },
    { "can_move_a_local_branch_to_a_partially_colliding_namespace", &test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace },
    { "can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one", &test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one },
    { "moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC", &test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC },
    { "can_not_move_a_non_branch", &test_refs_branches_move__can_not_move_a_non_branch },
    { "can_force_move_over_an_existing_branch", &test_refs_branches_move__can_force_move_over_an_existing_branch },
    { "moving_a_branch_moves_related_configuration_data", &test_refs_branches_move__moving_a_branch_moves_related_configuration_data },
    { "moving_the_branch_pointed_at_by_HEAD_updates_HEAD", &test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD },
    { "updates_the_reflog", &test_refs_branches_move__updates_the_reflog },
    { "default_reflog_message", &test_refs_branches_move__default_reflog_message },
    { "can_move_with_unicode", &test_refs_branches_move__can_move_with_unicode }
};
static const struct clar_func _clar_cb_core_pool[] = {
    { "0", &test_core_pool__0 },
    { "1", &test_core_pool__1 },
    { "2", &test_core_pool__2 },
    { "free_list", &test_core_pool__free_list },
    { "strndup_limit", &test_core_pool__strndup_limit }
};
static const struct clar_func _clar_cb_notes_notes[] = {
    { "can_retrieve_a_list_of_notes_for_a_given_namespace", &test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace },
    { "can_cancel_foreach", &test_notes_notes__can_cancel_foreach },
    { "retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND", &test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND },
    { "inserting_a_note_without_passing_a_namespace_uses_the_default_namespace", &test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace },
    { "can_insert_a_note_with_a_custom_namespace", &test_notes_notes__can_insert_a_note_with_a_custom_namespace },
    { "creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS", &test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS },
    { "creating_a_note_on_a_target_can_overwrite_existing_note", &test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note },
    { "can_insert_a_note_in_an_existing_fanout", &test_notes_notes__can_insert_a_note_in_an_existing_fanout },
    { "can_read_a_note_in_an_existing_fanout", &test_notes_notes__can_read_a_note_in_an_existing_fanout },
    { "can_remove_a_note_in_an_existing_fanout", &test_notes_notes__can_remove_a_note_in_an_existing_fanout },
    { "removing_a_note_which_doesnt_exists_returns_ENOTFOUND", &test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND },
    { "can_iterate_default_namespace", &test_notes_notes__can_iterate_default_namespace },
    { "can_iterate_custom_namespace", &test_notes_notes__can_iterate_custom_namespace },
    { "empty_iterate", &test_notes_notes__empty_iterate }
};
static const struct clar_func _clar_cb_object_tree_frompath[] = {
    { "retrieve_tree_from_path_to_treeentry", &test_object_tree_frompath__retrieve_tree_from_path_to_treeentry },
    { "fail_when_processing_an_invalid_path", &test_object_tree_frompath__fail_when_processing_an_invalid_path }
};
static const struct clar_func _clar_cb_online_fetch[] = {
    { "default_git", &test_online_fetch__default_git },
    { "default_http", &test_online_fetch__default_http },
    { "default_https", &test_online_fetch__default_https },
    { "no_tags_git", &test_online_fetch__no_tags_git },
    { "no_tags_http", &test_online_fetch__no_tags_http },
    { "fetch_twice", &test_online_fetch__fetch_twice },
    { "doesnt_retrieve_a_pack_when_the_repository_is_up_to_date", &test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date },
    { "can_cancel", &test_online_fetch__can_cancel },
    { "ls_disconnected", &test_online_fetch__ls_disconnected },
    { "remote_symrefs", &test_online_fetch__remote_symrefs },
    { "twice", &test_online_fetch__twice }
};
static const struct clar_func _clar_cb_config_global[] = {
    { "open_global", &test_config_global__open_global },
    { "open_xdg", &test_config_global__open_xdg }
};
static const struct clar_func _clar_cb_buf_splice[] = {
    { "preprend", &test_buf_splice__preprend },
    { "append", &test_buf_splice__append },
    { "insert_at", &test_buf_splice__insert_at },
    { "remove_at", &test_buf_splice__remove_at },
    { "replace", &test_buf_splice__replace },
    { "replace_with_longer", &test_buf_splice__replace_with_longer },
    { "replace_with_shorter", &test_buf_splice__replace_with_shorter },
    { "truncate", &test_buf_splice__truncate },
    { "dont_do_anything", &test_buf_splice__dont_do_anything }
};
static const struct clar_func _clar_cb_repo_hashfile[] = {
    { "simple", &test_repo_hashfile__simple },
    { "filtered", &test_repo_hashfile__filtered }
};
static const struct clar_func _clar_cb_repo_headtree[] = {
    { "can_retrieve_the_root_tree_from_a_detached_head", &test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head },
    { "can_retrieve_the_root_tree_from_a_non_detached_head", &test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head },
    { "when_head_is_unborn_returns_EUNBORNBRANCH", &test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH },
    { "when_head_is_missing_returns_ENOTFOUND", &test_repo_headtree__when_head_is_missing_returns_ENOTFOUND }
};
static const struct clar_func _clar_cb_attr_lookup[] = {
    { "simple", &test_attr_lookup__simple },
    { "match_variants", &test_attr_lookup__match_variants },
    { "assign_variants", &test_attr_lookup__assign_variants },
    { "check_attr_examples", &test_attr_lookup__check_attr_examples },
    { "from_buffer", &test_attr_lookup__from_buffer }
};
static const struct clar_func _clar_cb_config_add[] = {
    { "to_existing_section", &test_config_add__to_existing_section },
    { "to_new_section", &test_config_add__to_new_section }
};
static struct clar_suite _clar_suites[] = {
    {
        "attr::file",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_attr_file, 4, 1
    },
    {
        "attr::flags",
        { NULL, NULL },
        { "cleanup", &test_attr_flags__cleanup },
        _clar_cb_attr_flags, 3, 1
    },
    {
        "attr::ignore",
        { "initialize", &test_attr_ignore__initialize },
        { "cleanup", &test_attr_ignore__cleanup },
        _clar_cb_attr_ignore, 11, 1
    },
    {
        "attr::lookup",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_attr_lookup, 5, 1
    },
    {
        "attr::repo",
        { "initialize", &test_attr_repo__initialize },
        { "cleanup", &test_attr_repo__cleanup },
        _clar_cb_attr_repo, 10, 1
    },
    {
        "blame::getters",
        { "initialize", &test_blame_getters__initialize },
        { "cleanup", &test_blame_getters__cleanup },
        _clar_cb_blame_getters, 2, 1
    },
    {
        "blame::harder",
        { "initialize", &test_blame_harder__initialize },
        { "cleanup", &test_blame_harder__cleanup },
        _clar_cb_blame_harder, 4, 1
    },
    {
        "blame::simple",
        { "initialize", &test_blame_simple__initialize },
        { "cleanup", &test_blame_simple__cleanup },
        _clar_cb_blame_simple, 8, 1
    },
    {
        "buf::basic",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_buf_basic, 2, 1
    },
    {
        "buf::oom",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_buf_oom, 1, 1
    },
    {
        "buf::splice",
        { "initialize", &test_buf_splice__initialize },
        { "cleanup", &test_buf_splice__cleanup },
        _clar_cb_buf_splice, 9, 1
    },
    {
        "checkout::binaryunicode",
        { "initialize", &test_checkout_binaryunicode__initialize },
        { "cleanup", &test_checkout_binaryunicode__cleanup },
        _clar_cb_checkout_binaryunicode, 2, 1
    },
    {
        "checkout::conflict",
        { "initialize", &test_checkout_conflict__initialize },
        { "cleanup", &test_checkout_conflict__cleanup },
        _clar_cb_checkout_conflict, 17, 1
    },
    {
        "checkout::crlf",
        { "initialize", &test_checkout_crlf__initialize },
        { "cleanup", &test_checkout_crlf__cleanup },
        _clar_cb_checkout_crlf, 14, 1
    },
    {
        "checkout::head",
        { "initialize", &test_checkout_head__initialize },
        { "cleanup", &test_checkout_head__cleanup },
        _clar_cb_checkout_head, 2, 1
    },
    {
        "checkout::icase",
        { "initialize", &test_checkout_icase__initialize },
        { "cleanup", &test_checkout_icase__cleanup },
        _clar_cb_checkout_icase, 5, 1
    },
    {
        "checkout::index",
        { "initialize", &test_checkout_index__initialize },
        { "cleanup", &test_checkout_index__cleanup },
        _clar_cb_checkout_index, 28, 1
    },
    {
        "checkout::nasty",
        { "initialize", &test_checkout_nasty__initialize },
        { "cleanup", &test_checkout_nasty__cleanup },
        _clar_cb_checkout_nasty, 30, 1
    },
    {
        "checkout::tree",
        { "initialize", &test_checkout_tree__initialize },
        { "cleanup", &test_checkout_tree__cleanup },
        _clar_cb_checkout_tree, 33, 1
    },
    {
        "checkout::typechange",
        { "initialize", &test_checkout_typechange__initialize },
        { "cleanup", &test_checkout_typechange__cleanup },
        _clar_cb_checkout_typechange, 2, 1
    },
    {
        "cherrypick::bare",
        { "initialize", &test_cherrypick_bare__initialize },
        { "cleanup", &test_cherrypick_bare__cleanup },
        _clar_cb_cherrypick_bare, 3, 1
    },
    {
        "cherrypick::workdir",
        { "initialize", &test_cherrypick_workdir__initialize },
        { "cleanup", &test_cherrypick_workdir__cleanup },
        _clar_cb_cherrypick_workdir, 10, 1
    },
    {
        "clone::empty",
        { "initialize", &test_clone_empty__initialize },
        { "cleanup", &test_clone_empty__cleanup },
        _clar_cb_clone_empty, 3, 1
    },
    {
        "clone::local",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_clone_local, 4, 1
    },
    {
        "clone::nonetwork",
        { "initialize", &test_clone_nonetwork__initialize },
        { "cleanup", &test_clone_nonetwork__cleanup },
        _clar_cb_clone_nonetwork, 17, 1
    },
    {
        "clone::transport",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_clone_transport, 1, 1
    },
    {
        "commit::commit",
        { "initialize", &test_commit_commit__initialize },
        { "cleanup", &test_commit_commit__cleanup },
        _clar_cb_commit_commit, 2, 1
    },
    {
        "commit::parent",
        { "initialize", &test_commit_parent__initialize },
        { "cleanup", &test_commit_parent__cleanup },
        _clar_cb_commit_parent, 1, 1
    },
    {
        "commit::parse",
        { "initialize", &test_commit_parse__initialize },
        { "cleanup", &test_commit_parse__cleanup },
        _clar_cb_commit_parse, 6, 1
    },
    {
        "commit::signature",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_commit_signature, 7, 1
    },
    {
        "config::add",
        { "initialize", &test_config_add__initialize },
        { "cleanup", &test_config_add__cleanup },
        _clar_cb_config_add, 2, 1
    },
    {
        "config::backend",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_backend, 1, 1
    },
    {
        "config::configlevel",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_configlevel, 4, 1
    },
    {
        "config::global",
        { "initialize", &test_config_global__initialize },
        { "cleanup", &test_config_global__cleanup },
        _clar_cb_config_global, 2, 1
    },
    {
        "config::include",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_include, 6, 1
    },
    {
        "config::multivar",
        { "initialize", &test_config_multivar__initialize },
        { "cleanup", &test_config_multivar__cleanup },
        _clar_cb_config_multivar, 9, 1
    },
    {
        "config::new",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_new, 1, 1
    },
    {
        "config::read",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_read, 28, 1
    },
    {
        "config::rename",
        { "initialize", &test_config_rename__initialize },
        { "cleanup", &test_config_rename__cleanup },
        _clar_cb_config_rename, 3, 1
    },
    {
        "config::snapshot",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_config_snapshot, 2, 1
    },
    {
        "config::stress",
        { "initialize", &test_config_stress__initialize },
        { "cleanup", &test_config_stress__cleanup },
        _clar_cb_config_stress, 5, 1
    },
    {
        "config::validkeyname",
        { "initialize", &test_config_validkeyname__initialize },
        { "cleanup", &test_config_validkeyname__cleanup },
        _clar_cb_config_validkeyname, 1, 1
    },
    {
        "config::write",
        { "initialize", &test_config_write__initialize },
        { "cleanup", &test_config_write__cleanup },
        _clar_cb_config_write, 15, 1
    },
    {
        "core::bitvec",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_bitvec, 1, 1
    },
    {
        "core::buffer",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_buffer, 23, 1
    },
    {
        "core::copy",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_copy, 3, 1
    },
    {
        "core::dirent",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_dirent, 7, 1
    },
    {
        "core::env",
        { "initialize", &test_core_env__initialize },
        { "cleanup", &test_core_env__cleanup },
        _clar_cb_core_env, 3, 1
    },
    {
        "core::errors",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_errors, 3, 1
    },
    {
        "core::features",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_features, 1, 1
    },
    {
        "core::filebuf",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_filebuf, 6, 1
    },
    {
        "core::hex",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_hex, 1, 1
    },
    {
        "core::iconv",
        { "initialize", &test_core_iconv__initialize },
        { "cleanup", &test_core_iconv__cleanup },
        _clar_cb_core_iconv, 3, 1
    },
    {
        "core::init",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_init, 1, 1
    },
    {
        "core::link",
        { NULL, NULL },
        { "cleanup", &test_core_link__cleanup },
        _clar_cb_core_link, 24, 1
    },
    {
        "core::mkdir",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_mkdir, 4, 1
    },
    {
        "core::oid",
        { "initialize", &test_core_oid__initialize },
        { NULL, NULL },
        _clar_cb_core_oid, 3, 1
    },
    {
        "core::oidmap",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_oidmap, 2, 1
    },
    {
        "core::opts",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_opts, 1, 1
    },
    {
        "core::path",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_path, 15, 1
    },
    {
        "core::pool",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_pool, 5, 1
    },
    {
        "core::posix",
        { "initialize", &test_core_posix__initialize },
        { NULL, NULL },
        _clar_cb_core_posix, 1, 1
    },
    {
        "core::pqueue",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_pqueue, 4, 1
    },
    {
        "core::rmdir",
        { "initialize", &test_core_rmdir__initialize },
        { NULL, NULL },
        _clar_cb_core_rmdir, 4, 1
    },
    {
        "core::sortedcache",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_sortedcache, 3, 1
    },
    {
        "core::stat",
        { "initialize", &test_core_stat__initialize },
        { "cleanup", &test_core_stat__cleanup },
        _clar_cb_core_stat, 2, 1
    },
    {
        "core::string",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_string, 3, 1
    },
    {
        "core::strmap",
        { "initialize", &test_core_strmap__initialize },
        { "cleanup", &test_core_strmap__cleanup },
        _clar_cb_core_strmap, 4, 1
    },
    {
        "core::strtol",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_strtol, 2, 1
    },
    {
        "core::vector",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_vector, 7, 1
    },
    {
        "core::zstream",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_core_zstream, 3, 1
    },
    {
        "date::date",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_date_date, 1, 1
    },
    {
        "date::rfc2822",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_date_rfc2822, 4, 1
    },
    {
        "describe::describe",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_describe_describe, 2, 1
    },
    {
        "describe::t6120",
        { "initialize", &test_describe_t6120__initialize },
        { "cleanup", &test_describe_t6120__cleanup },
        _clar_cb_describe_t6120, 7, 1
    },
    {
        "diff::binary",
        { "initialize", &test_diff_binary__initialize },
        { "cleanup", &test_diff_binary__cleanup },
        _clar_cb_diff_binary, 8, 1
    },
    {
        "diff::blob",
        { "initialize", &test_diff_blob__initialize },
        { "cleanup", &test_diff_blob__cleanup },
        _clar_cb_diff_blob, 18, 1
    },
    {
        "diff::diffiter",
        { "initialize", &test_diff_diffiter__initialize },
        { "cleanup", &test_diff_diffiter__cleanup },
        _clar_cb_diff_diffiter, 9, 1
    },
    {
        "diff::drivers",
        { "initialize", &test_diff_drivers__initialize },
        { "cleanup", &test_diff_drivers__cleanup },
        _clar_cb_diff_drivers, 3, 1
    },
    {
        "diff::format::email",
        { "initialize", &test_diff_format_email__initialize },
        { "cleanup", &test_diff_format_email__cleanup },
        _clar_cb_diff_format_email, 8, 1
    },
    {
        "diff::iterator",
        { "initialize", &test_diff_iterator__initialize },
        { "cleanup", &test_diff_iterator__cleanup },
        _clar_cb_diff_iterator, 33, 1
    },
    {
        "diff::notify",
        { "initialize", &test_diff_notify__initialize },
        { "cleanup", &test_diff_notify__cleanup },
        _clar_cb_diff_notify, 6, 1
    },
    {
        "diff::patch",
        { "initialize", &test_diff_patch__initialize },
        { "cleanup", &test_diff_patch__cleanup },
        _clar_cb_diff_patch, 6, 1
    },
    {
        "diff::pathspec",
        { "initialize", &test_diff_pathspec__initialize },
        { "cleanup", &test_diff_pathspec__cleanup },
        _clar_cb_diff_pathspec, 1, 1
    },
    {
        "diff::stats",
        { "initialize", &test_diff_stats__initialize },
        { "cleanup", &test_diff_stats__cleanup },
        _clar_cb_diff_stats, 13, 1
    },
    {
        "diff::submodules",
        { "initialize", &test_diff_submodules__initialize },
        { "cleanup", &test_diff_submodules__cleanup },
        _clar_cb_diff_submodules, 8, 1
    },
    {
        "filter::custom",
        { "initialize", &test_filter_custom__initialize },
        { "cleanup", &test_filter_custom__cleanup },
        _clar_cb_filter_custom, 5, 1
    },
    {
        "filter::ident",
        { "initialize", &test_filter_ident__initialize },
        { "cleanup", &test_filter_ident__cleanup },
        _clar_cb_filter_ident, 2, 1
    },
    {
        "graph::descendant::of",
        { "initialize", &test_graph_descendant_of__initialize },
        { "cleanup", &test_graph_descendant_of__cleanup },
        _clar_cb_graph_descendant_of, 2, 1
    },
    {
        "index::addall",
        { "initialize", &test_index_addall__initialize },
        { "cleanup", &test_index_addall__cleanup },
        _clar_cb_index_addall, 2, 1
    },
    {
        "index::cache",
        { "initialize", &test_index_cache__initialize },
        { "cleanup", &test_index_cache__cleanup },
        _clar_cb_index_cache, 5, 1
    },
    {
        "index::collision",
        { NULL, NULL },
        { "cleanup", &test_index_collision__cleanup },
        _clar_cb_index_collision, 3, 1
    },
    {
        "index::conflicts",
        { "initialize", &test_index_conflicts__initialize },
        { "cleanup", &test_index_conflicts__cleanup },
        _clar_cb_index_conflicts, 9, 1
    },
    {
        "index::filemodes",
        { "initialize", &test_index_filemodes__initialize },
        { "cleanup", &test_index_filemodes__cleanup },
        _clar_cb_index_filemodes, 4, 1
    },
    {
        "index::inmemory",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_index_inmemory, 2, 1
    },
    {
        "index::names",
        { "initialize", &test_index_names__initialize },
        { "cleanup", &test_index_names__cleanup },
        _clar_cb_index_names, 7, 1
    },
    {
        "index::read::tree",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_index_read_tree, 1, 1
    },
    {
        "index::reuc",
        { "initialize", &test_index_reuc__initialize },
        { "cleanup", &test_index_reuc__cleanup },
        _clar_cb_index_reuc, 14, 1
    },
    {
        "index::stage",
        { "initialize", &test_index_stage__initialize },
        { "cleanup", &test_index_stage__cleanup },
        _clar_cb_index_stage, 2, 1
    },
    {
        "index::tests",
        { "initialize", &test_index_tests__initialize },
        { NULL, NULL },
        _clar_cb_index_tests, 21, 1
    },
    {
        "merge::files",
        { "initialize", &test_merge_files__initialize },
        { "cleanup", &test_merge_files__cleanup },
        _clar_cb_merge_files, 4, 1
    },
    {
        "merge::trees::automerge",
        { "initialize", &test_merge_trees_automerge__initialize },
        { "cleanup", &test_merge_trees_automerge__cleanup },
        _clar_cb_merge_trees_automerge, 4, 1
    },
    {
        "merge::trees::commits",
        { "initialize", &test_merge_trees_commits__initialize },
        { "cleanup", &test_merge_trees_commits__cleanup },
        _clar_cb_merge_trees_commits, 3, 1
    },
    {
        "merge::trees::modeconflict",
        { "initialize", &test_merge_trees_modeconflict__initialize },
        { "cleanup", &test_merge_trees_modeconflict__cleanup },
        _clar_cb_merge_trees_modeconflict, 1, 1
    },
    {
        "merge::trees::renames",
        { "initialize", &test_merge_trees_renames__initialize },
        { "cleanup", &test_merge_trees_renames__cleanup },
        _clar_cb_merge_trees_renames, 2, 1
    },
    {
        "merge::trees::treediff",
        { "initialize", &test_merge_trees_treediff__initialize },
        { "cleanup", &test_merge_trees_treediff__cleanup },
        _clar_cb_merge_trees_treediff, 5, 1
    },
    {
        "merge::trees::trivial",
        { "initialize", &test_merge_trees_trivial__initialize },
        { "cleanup", &test_merge_trees_trivial__cleanup },
        _clar_cb_merge_trees_trivial, 13, 1
    },
    {
        "merge::workdir::analysis",
        { "initialize", &test_merge_workdir_analysis__initialize },
        { "cleanup", &test_merge_workdir_analysis__cleanup },
        _clar_cb_merge_workdir_analysis, 7, 1
    },
    {
        "merge::workdir::dirty",
        { "initialize", &test_merge_workdir_dirty__initialize },
        { "cleanup", &test_merge_workdir_dirty__cleanup },
        _clar_cb_merge_workdir_dirty, 6, 1
    },
    {
        "merge::workdir::setup",
        { "initialize", &test_merge_workdir_setup__initialize },
        { "cleanup", &test_merge_workdir_setup__cleanup },
        _clar_cb_merge_workdir_setup, 30, 1
    },
    {
        "network::cred",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_network_cred, 3, 1
    },
    {
        "network::fetchlocal",
        { NULL, NULL },
        { "cleanup", &test_network_fetchlocal__cleanup },
        _clar_cb_network_fetchlocal, 11, 1
    },
    {
        "network::matchhost",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_network_matchhost, 1, 1
    },
    {
        "network::refspecs",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_network_refspecs, 5, 1
    },
    {
        "network::remote::createthenload",
        { "initialize", &test_network_remote_createthenload__initialize },
        { "cleanup", &test_network_remote_createthenload__cleanup },
        _clar_cb_network_remote_createthenload, 1, 1
    },
    {
        "network::remote::defaultbranch",
        { "initialize", &test_network_remote_defaultbranch__initialize },
        { "cleanup", &test_network_remote_defaultbranch__cleanup },
        _clar_cb_network_remote_defaultbranch, 6, 1
    },
    {
        "network::remote::delete",
        { "initialize", &test_network_remote_delete__initialize },
        { "cleanup", &test_network_remote_delete__cleanup },
        _clar_cb_network_remote_delete, 3, 1
    },
    {
        "network::remote::remotes",
        { "initialize", &test_network_remote_remotes__initialize },
        { "cleanup", &test_network_remote_remotes__cleanup },
        _clar_cb_network_remote_remotes, 31, 1
    },
    {
        "network::urlparse",
        { "initialize", &test_network_urlparse__initialize },
        { "cleanup", &test_network_urlparse__cleanup },
        _clar_cb_network_urlparse, 17, 1
    },
    {
        "notes::notes",
        { "initialize", &test_notes_notes__initialize },
        { "cleanup", &test_notes_notes__cleanup },
        _clar_cb_notes_notes, 14, 1
    },
    {
        "notes::notesref",
        { "initialize", &test_notes_notesref__initialize },
        { "cleanup", &test_notes_notesref__cleanup },
        _clar_cb_notes_notesref, 1, 1
    },
    {
        "object::blob::filter",
        { "initialize", &test_object_blob_filter__initialize },
        { "cleanup", &test_object_blob_filter__cleanup },
        _clar_cb_object_blob_filter, 3, 1
    },
    {
        "object::blob::fromchunks",
        { "initialize", &test_object_blob_fromchunks__initialize },
        { "cleanup", &test_object_blob_fromchunks__cleanup },
        _clar_cb_object_blob_fromchunks, 4, 1
    },
    {
        "object::commit::commitstagedfile",
        { "initialize", &test_object_commit_commitstagedfile__initialize },
        { "cleanup", &test_object_commit_commitstagedfile__cleanup },
        _clar_cb_object_commit_commitstagedfile, 2, 1
    },
    {
        "object::lookupbypath",
        { "initialize", &test_object_lookupbypath__initialize },
        { "cleanup", &test_object_lookupbypath__cleanup },
        _clar_cb_object_lookupbypath, 4, 1
    },
    {
        "object::message",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_message, 16, 1
    },
    {
        "object::peel",
        { "initialize", &test_object_peel__initialize },
        { "cleanup", &test_object_peel__cleanup },
        _clar_cb_object_peel, 6, 1
    },
    {
        "object::raw::chars",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_chars, 2, 1
    },
    {
        "object::raw::compare",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_compare, 7, 1
    },
    {
        "object::raw::convert",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_convert, 3, 1
    },
    {
        "object::raw::fromstr",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_fromstr, 2, 1
    },
    {
        "object::raw::hash",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_hash, 11, 1
    },
    {
        "object::raw::short",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_short, 3, 1
    },
    {
        "object::raw::size",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_size, 1, 1
    },
    {
        "object::raw::type2string",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_object_raw_type2string, 3, 1
    },
    {
        "object::shortid",
        { "initialize", &test_object_shortid__initialize },
        { "cleanup", &test_object_shortid__cleanup },
        _clar_cb_object_shortid, 1, 1
    },
    {
        "object::tag::list",
        { "initialize", &test_object_tag_list__initialize },
        { "cleanup", &test_object_tag_list__cleanup },
        _clar_cb_object_tag_list, 2, 1
    },
    {
        "object::tree::attributes",
        { "initialize", &test_object_tree_attributes__initialize },
        { "cleanup", &test_object_tree_attributes__cleanup },
        _clar_cb_object_tree_attributes, 5, 1
    },
    {
        "object::tree::duplicateentries",
        { "initialize", &test_object_tree_duplicateentries__initialize },
        { "cleanup", &test_object_tree_duplicateentries__cleanup },
        _clar_cb_object_tree_duplicateentries, 2, 1
    },
    {
        "object::tree::frompath",
        { "initialize", &test_object_tree_frompath__initialize },
        { "cleanup", &test_object_tree_frompath__cleanup },
        _clar_cb_object_tree_frompath, 2, 1
    },
    {
        "object::tree::walk",
        { "initialize", &test_object_tree_walk__initialize },
        { "cleanup", &test_object_tree_walk__cleanup },
        _clar_cb_object_tree_walk, 3, 1
    },
    {
        "odb::alternates",
        { NULL, NULL },
        { "cleanup", &test_odb_alternates__cleanup },
        _clar_cb_odb_alternates, 2, 1
    },
    {
        "odb::backend::nobackend",
        { "initialize", &test_odb_backend_nobackend__initialize },
        { "cleanup", &test_odb_backend_nobackend__cleanup },
        _clar_cb_odb_backend_nobackend, 1, 1
    },
    {
        "odb::backend::nonrefreshing",
        { NULL, NULL },
        { "cleanup", &test_odb_backend_nonrefreshing__cleanup },
        _clar_cb_odb_backend_nonrefreshing, 9, 1
    },
    {
        "odb::emptyobjects",
        { "initialize", &test_odb_emptyobjects__initialize },
        { "cleanup", &test_odb_emptyobjects__cleanup },
        _clar_cb_odb_emptyobjects, 3, 1
    },
    {
        "odb::foreach",
        { NULL, NULL },
        { "cleanup", &test_odb_foreach__cleanup },
        _clar_cb_odb_foreach, 4, 1
    },
    {
        "odb::loose",
        { "initialize", &test_odb_loose__initialize },
        { "cleanup", &test_odb_loose__cleanup },
        _clar_cb_odb_loose, 4, 1
    },
    {
        "odb::mixed",
        { "initialize", &test_odb_mixed__initialize },
        { "cleanup", &test_odb_mixed__cleanup },
        _clar_cb_odb_mixed, 2, 1
    },
    {
        "odb::packed",
        { "initialize", &test_odb_packed__initialize },
        { "cleanup", &test_odb_packed__cleanup },
        _clar_cb_odb_packed, 3, 1
    },
    {
        "odb::packed::one",
        { "initialize", &test_odb_packed_one__initialize },
        { "cleanup", &test_odb_packed_one__cleanup },
        _clar_cb_odb_packed_one, 2, 1
    },
    {
        "odb::sorting",
        { "initialize", &test_odb_sorting__initialize },
        { "cleanup", &test_odb_sorting__cleanup },
        _clar_cb_odb_sorting, 2, 1
    },
    {
        "odb::streamwrite",
        { "initialize", &test_odb_streamwrite__initialize },
        { "cleanup", &test_odb_streamwrite__cleanup },
        _clar_cb_odb_streamwrite, 3, 1
    },
    {
        "online::clone",
        { "initialize", &test_online_clone__initialize },
        { "cleanup", &test_online_clone__cleanup },
        _clar_cb_online_clone, 18, 0
    },
    {
        "online::fetch",
        { "initialize", &test_online_fetch__initialize },
        { "cleanup", &test_online_fetch__cleanup },
        _clar_cb_online_fetch, 11, 0
    },
    {
        "online::fetchhead",
        { "initialize", &test_online_fetchhead__initialize },
        { "cleanup", &test_online_fetchhead__cleanup },
        _clar_cb_online_fetchhead, 3, 0
    },
    {
        "online::push",
        { "initialize", &test_online_push__initialize },
        { "cleanup", &test_online_push__cleanup },
        _clar_cb_online_push, 21, 0
    },
    {
        "pack::indexer",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_pack_indexer, 2, 1
    },
    {
        "pack::packbuilder",
        { "initialize", &test_pack_packbuilder__initialize },
        { "cleanup", &test_pack_packbuilder__cleanup },
        _clar_cb_pack_packbuilder, 7, 1
    },
    {
        "pack::sharing",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_pack_sharing, 1, 1
    },
    {
        "path::core",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_path_core, 15, 1
    },
    {
        "path::win32",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_path_win32, 10, 1
    },
    {
        "rebase::abort",
        { "initialize", &test_rebase_abort__initialize },
        { "cleanup", &test_rebase_abort__cleanup },
        _clar_cb_rebase_abort, 3, 1
    },
    {
        "rebase::merge",
        { "initialize", &test_rebase_merge__initialize },
        { "cleanup", &test_rebase_merge__cleanup },
        _clar_cb_rebase_merge, 11, 1
    },
    {
        "refs::branches::ishead",
        { "initialize", &test_refs_branches_ishead__initialize },
        { "cleanup", &test_refs_branches_ishead__cleanup },
        _clar_cb_refs_branches_ishead, 6, 1
    },
    {
        "refs::branches::move",
        { "initialize", &test_refs_branches_move__initialize },
        { "cleanup", &test_refs_branches_move__cleanup },
        _clar_cb_refs_branches_move, 12, 1
    },
    {
        "refs::branches::name",
        { "initialize", &test_refs_branches_name__initialize },
        { "cleanup", &test_refs_branches_name__cleanup },
        _clar_cb_refs_branches_name, 3, 1
    },
    {
        "refs::branches::remote",
        { "initialize", &test_refs_branches_remote__initialize },
        { "cleanup", &test_refs_branches_remote__cleanup },
        _clar_cb_refs_branches_remote, 4, 1
    },
    {
        "refs::branches::upstream",
        { "initialize", &test_refs_branches_upstream__initialize },
        { "cleanup", &test_refs_branches_upstream__cleanup },
        _clar_cb_refs_branches_upstream, 9, 1
    },
    {
        "refs::branches::upstreamname",
        { "initialize", &test_refs_branches_upstreamname__initialize },
        { "cleanup", &test_refs_branches_upstreamname__cleanup },
        _clar_cb_refs_branches_upstreamname, 2, 1
    },
    {
        "refs::crashes",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_refs_crashes, 1, 1
    },
    {
        "refs::create",
        { "initialize", &test_refs_create__initialize },
        { "cleanup", &test_refs_create__cleanup },
        _clar_cb_refs_create, 7, 1
    },
    {
        "refs::createwithlog",
        { "initialize", &test_refs_createwithlog__initialize },
        { "cleanup", &test_refs_createwithlog__cleanup },
        _clar_cb_refs_createwithlog, 1, 1
    },
    {
        "refs::foreachglob",
        { "initialize", &test_refs_foreachglob__initialize },
        { "cleanup", &test_refs_foreachglob__cleanup },
        _clar_cb_refs_foreachglob, 5, 1
    },
    {
        "refs::isvalidname",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_refs_isvalidname, 2, 1
    },
    {
        "refs::listall",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_refs_listall, 3, 1
    },
    {
        "refs::normalize",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_refs_normalize, 6, 1
    },
    {
        "refs::overwrite",
        { "initialize", &test_refs_overwrite__initialize },
        { "cleanup", &test_refs_overwrite__cleanup },
        _clar_cb_refs_overwrite, 4, 1
    },
    {
        "refs::pack",
        { "initialize", &test_refs_pack__initialize },
        { "cleanup", &test_refs_pack__cleanup },
        _clar_cb_refs_pack, 3, 1
    },
    {
        "refs::races",
        { "initialize", &test_refs_races__initialize },
        { "cleanup", &test_refs_races__cleanup },
        _clar_cb_refs_races, 5, 1
    },
    {
        "refs::reflog::drop",
        { "initialize", &test_refs_reflog_drop__initialize },
        { "cleanup", &test_refs_reflog_drop__cleanup },
        _clar_cb_refs_reflog_drop, 7, 1
    },
    {
        "refs::reflog::reflog",
        { "initialize", &test_refs_reflog_reflog__initialize },
        { "cleanup", &test_refs_reflog_reflog__cleanup },
        _clar_cb_refs_reflog_reflog, 13, 1
    },
    {
        "refs::revparse",
        { "initialize", &test_refs_revparse__initialize },
        { "cleanup", &test_refs_revparse__cleanup },
        _clar_cb_refs_revparse, 32, 1
    },
    {
        "refs::settargetwithlog",
        { "initialize", &test_refs_settargetwithlog__initialize },
        { "cleanup", &test_refs_settargetwithlog__cleanup },
        _clar_cb_refs_settargetwithlog, 1, 1
    },
    {
        "refs::setter",
        { "initialize", &test_refs_setter__initialize },
        { "cleanup", &test_refs_setter__cleanup },
        _clar_cb_refs_setter, 4, 1
    },
    {
        "refs::shorthand",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_refs_shorthand, 1, 1
    },
    {
        "refs::transactions",
        { "initialize", &test_refs_transactions__initialize },
        { "cleanup", &test_refs_transactions__cleanup },
        _clar_cb_refs_transactions, 6, 1
    },
    {
        "refs::unicode",
        { "initialize", &test_refs_unicode__initialize },
        { "cleanup", &test_refs_unicode__cleanup },
        _clar_cb_refs_unicode, 1, 1
    },
    {
        "refs::update",
        { "initialize", &test_refs_update__initialize },
        { "cleanup", &test_refs_update__cleanup },
        _clar_cb_refs_update, 1, 1
    },
    {
        "repo::config",
        { "initialize", &test_repo_config__initialize },
        { "cleanup", &test_repo_config__cleanup },
        _clar_cb_repo_config, 3, 1
    },
    {
        "repo::discover",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_repo_discover, 1, 1
    },
    {
        "repo::hashfile",
        { "initialize", &test_repo_hashfile__initialize },
        { "cleanup", &test_repo_hashfile__cleanup },
        _clar_cb_repo_hashfile, 2, 1
    },
    {
        "repo::headtree",
        { "initialize", &test_repo_headtree__initialize },
        { "cleanup", &test_repo_headtree__cleanup },
        _clar_cb_repo_headtree, 4, 1
    },
    {
        "repo::open",
        { NULL, NULL },
        { "cleanup", &test_repo_open__cleanup },
        _clar_cb_repo_open, 12, 1
    },
    {
        "repo::setters",
        { "initialize", &test_repo_setters__initialize },
        { "cleanup", &test_repo_setters__cleanup },
        _clar_cb_repo_setters, 5, 1
    },
    {
        "repo::shallow",
        { "initialize", &test_repo_shallow__initialize },
        { "cleanup", &test_repo_shallow__cleanup },
        _clar_cb_repo_shallow, 4, 1
    },
    {
        "repo::state",
        { "initialize", &test_repo_state__initialize },
        { "cleanup", &test_repo_state__cleanup },
        _clar_cb_repo_state, 11, 1
    },
    {
        "reset::default",
        { "initialize", &test_reset_default__initialize },
        { "cleanup", &test_reset_default__cleanup },
        _clar_cb_reset_default, 5, 1
    },
    {
        "reset::hard",
        { "initialize", &test_reset_hard__initialize },
        { "cleanup", &test_reset_hard__cleanup },
        _clar_cb_reset_hard, 5, 1
    },
    {
        "reset::soft",
        { "initialize", &test_reset_soft__initialize },
        { "cleanup", &test_reset_soft__cleanup },
        _clar_cb_reset_soft, 8, 1
    },
    {
        "revwalk::hidecb",
        { "initialize", &test_revwalk_hidecb__initialize },
        { "cleanup", &test_revwalk_hidecb__cleanup },
        _clar_cb_revwalk_hidecb, 6, 1
    },
    {
        "revwalk::mergebase",
        { "initialize", &test_revwalk_mergebase__initialize },
        { "cleanup", &test_revwalk_mergebase__cleanup },
        _clar_cb_revwalk_mergebase, 13, 1
    },
    {
        "revwalk::signatureparsing",
        { "initialize", &test_revwalk_signatureparsing__initialize },
        { "cleanup", &test_revwalk_signatureparsing__cleanup },
        _clar_cb_revwalk_signatureparsing, 1, 1
    },
    {
        "revwalk::simplify",
        { NULL, NULL },
        { "cleanup", &test_revwalk_simplify__cleanup },
        _clar_cb_revwalk_simplify, 1, 1
    },
    {
        "stash::save",
        { "initialize", &test_stash_save__initialize },
        { "cleanup", &test_stash_save__cleanup },
        _clar_cb_stash_save, 15, 1
    },
    {
        "status::single",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_status_single, 2, 1
    },
    {
        "status::worktree",
        { NULL, NULL },
        { "cleanup", &test_status_worktree__cleanup },
        _clar_cb_status_worktree, 38, 1
    },
    {
        "status::worktree::init",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_status_worktree_init, 8, 1
    },
    {
        "stress::diff",
        { "initialize", &test_stress_diff__initialize },
        { "cleanup", &test_stress_diff__cleanup },
        _clar_cb_stress_diff, 2, 0
    },
    {
        "structinit::structinit",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_structinit_structinit, 1, 1
    },
    {
        "submodule::modify",
        { "initialize", &test_submodule_modify__initialize },
        { NULL, NULL },
        _clar_cb_submodule_modify, 3, 1
    },
    {
        "submodule::nosubs",
        { NULL, NULL },
        { "cleanup", &test_submodule_nosubs__cleanup },
        _clar_cb_submodule_nosubs, 7, 1
    },
    {
        "submodule::repository::init",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_submodule_repository_init, 1, 1
    },
    {
        "submodule::status",
        { "initialize", &test_submodule_status__initialize },
        { "cleanup", &test_submodule_status__cleanup },
        _clar_cb_submodule_status, 7, 1
    },
    {
        "threads::refdb",
        { "initialize", &test_threads_refdb__initialize },
        { "cleanup", &test_threads_refdb__cleanup },
        _clar_cb_threads_refdb, 2, 1
    },
    {
        "trace::trace",
        { "initialize", &test_trace_trace__initialize },
        { "cleanup", &test_trace_trace__cleanup },
        _clar_cb_trace_trace, 6, 1
    },
    {
        "transport::register",
        { NULL, NULL },
        { NULL, NULL },
        _clar_cb_transport_register, 4, 1
    }
};
static const size_t _clar_suite_count = 216;
static const size_t _clar_callback_count = 1373;
